<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="wall__2d_8h" kind="file" language="C++">
    <compoundname>wall_2d.h</compoundname>
    <includes refid="ascot5_8h" local="yes">../ascot5.h</includes>
    <includedby refid="hdf5__wall_8c" local="yes">hdf5io/hdf5_wall.c</includedby>
    <includedby refid="wall__2d_8c" local="yes">wall/wall_2d.c</includedby>
    <includedby refid="wall_8c" local="yes">wall.c</includedby>
    <includedby refid="wall_8h" local="yes">wall.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>omp.h</label>
      </node>
      <node id="4">
        <label>time.h</label>
      </node>
      <node id="1">
        <label>wall/wall_2d.h</label>
        <link refid="wall__2d_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../ascot5.h</label>
        <link refid="ascot5_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="28">
        <label>simulate/simulate_ml_adaptive.c</label>
        <link refid="simulate__ml__adaptive_8c"/>
      </node>
      <node id="38">
        <label>simulate/simulate_ml_adaptive.h</label>
        <link refid="simulate__ml__adaptive_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>diag.c</label>
        <link refid="diag_8c"/>
      </node>
      <node id="29">
        <label>simulate.c</label>
        <link refid="simulate_8c"/>
      </node>
      <node id="15">
        <label>simulate.h</label>
        <link refid="simulate_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>simulate/simulate_fo_fixed.c</label>
        <link refid="simulate__fo__fixed_8c"/>
      </node>
      <node id="35">
        <label>simulate/simulate_fo_fixed.h</label>
        <link refid="simulate__fo__fixed_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>wall.c</label>
        <link refid="wall_8c"/>
      </node>
      <node id="27">
        <label>simulate/simulate_gc_fixed.c</label>
        <link refid="simulate__gc__fixed_8c"/>
      </node>
      <node id="6">
        <label>ascot5_main.c</label>
        <link refid="ascot5__main_8c"/>
      </node>
      <node id="5">
        <label>wall.h</label>
        <link refid="wall_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>simulate/simulate_gc_fixed.h</label>
        <link refid="simulate__gc__fixed_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ascot5_main.h</label>
        <link refid="ascot5__main_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>endcond.c</label>
        <link refid="endcond_8c"/>
      </node>
      <node id="23">
        <label>endcond.h</label>
        <link refid="endcond_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>afsi.c</label>
        <link refid="afsi_8c"/>
      </node>
      <node id="17">
        <label>afsi.h</label>
        <link refid="afsi_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>nbi.c</label>
        <link refid="nbi_8c"/>
      </node>
      <node id="12">
        <label>nbi.h</label>
        <link refid="nbi_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hdf5io/hdf5_wall.c</label>
        <link refid="hdf5__wall_8c"/>
      </node>
      <node id="8">
        <label>hdf5io/hdf5_wall.h</label>
        <link refid="hdf5__wall_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>diag/diag_orb.c</label>
        <link refid="diag__orb_8c"/>
      </node>
      <node id="24">
        <label>hdf5io/hdf5_options.c</label>
        <link refid="hdf5__options_8c"/>
      </node>
      <node id="31">
        <label>hdf5io/hdf5_options.h</label>
        <link refid="hdf5__options_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>hdf5io/hdf5_orbit.c</label>
        <link refid="hdf5__orbit_8c"/>
      </node>
      <node id="26">
        <label>simulate/simulate_gc_adaptive.c</label>
        <link refid="simulate__gc__adaptive_8c"/>
      </node>
      <node id="36">
        <label>simulate/simulate_gc_adaptive.h</label>
        <link refid="simulate__gc__adaptive_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>mpi_interface.c</label>
        <link refid="mpi__interface_8c"/>
      </node>
      <node id="34">
        <label>mpi_interface.h</label>
        <link refid="mpi__interface_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>libascot.c</label>
        <link refid="libascot_8c"/>
      </node>
      <node id="9">
        <label>hdf5_interface.c</label>
        <link refid="hdf5__interface_8c"/>
      </node>
      <node id="30">
        <label>hdf5_interface.h</label>
        <link refid="hdf5__interface_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>diag/diag_transcoef.c</label>
        <link refid="diag__transcoef_8c"/>
      </node>
      <node id="7">
        <label>bbnbi5.c</label>
        <link refid="bbnbi5_8c"/>
      </node>
      <node id="13">
        <label>hdf5io/hdf5_nbi.c</label>
        <link refid="hdf5__nbi_8c"/>
      </node>
      <node id="14">
        <label>hdf5io/hdf5_nbi.h</label>
        <link refid="hdf5__nbi_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>wall/wall_2d.c</label>
        <link refid="wall__2d_8c"/>
      </node>
      <node id="1">
        <label>wall/wall_2d.h</label>
        <link refid="wall__2d_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structwall__2d__offload__data" prot="public">wall_2d_offload_data</innerclass>
    <innerclass refid="structwall__2d__data" prot="public">wall_2d_data</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="wall__2d_8h_1a8e995d541a21a25b438cea528f046f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wall_2d_init_offload</definition>
        <argsstring>(wall_2d_offload_data *offload_data, real **offload_array)</argsstring>
        <name>wall_2d_init_offload</name>
        <param>
          <type><ref refid="structwall__2d__offload__data" kindref="compound">wall_2d_offload_data</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>offload_array</declname>
        </param>
        <briefdescription>
<para>Load 2D wall data and prepare parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function assumes offload data is already finished and the offload array is allocated and initialized with values</para>
<para>&amp;(*offload_array)[0] = Wall polygon R coordinates &amp;(*offload_array)[n] = Wall polygon z coordinates</para>
<para>Since this data requires no initialization, the only thing this function does is that it prints some values as sanity check.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to offload array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero to indicate success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="wall/wall_2d.h" line="28" column="5" bodyfile="wall/wall_2d.c" bodystart="29" bodyend="49" declfile="wall/wall_2d.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="wall__2d_8h_1a03243bd2237fc067855155ffcf4813f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wall_2d_free_offload</definition>
        <argsstring>(wall_2d_offload_data *offload_data, real **offload_array)</argsstring>
        <name>wall_2d_free_offload</name>
        <param>
          <type><ref refid="structwall__2d__offload__data" kindref="compound">wall_2d_offload_data</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>offload_array</declname>
        </param>
        <briefdescription>
<para>Free offload array and reset parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function deallocates the offload_array.</para>
<para>This function is host only.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to offload array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="wall/wall_2d.h" line="30" column="6" bodyfile="wall/wall_2d.c" bodystart="62" bodyend="66" declfile="wall/wall_2d.h" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="wall__2d_8h_1a417323f274cc169e65f270791b6955df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wall_2d_init</definition>
        <argsstring>(wall_2d_data *w, wall_2d_offload_data *offload_data, real *offload_array)</argsstring>
        <name>wall_2d_init</name>
        <param>
          <type><ref refid="structwall__2d__data" kindref="compound">wall_2d_data</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="structwall__2d__offload__data" kindref="compound">wall_2d_offload_data</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>offload_array</declname>
        </param>
        <briefdescription>
<para>Initialize 2D wall data struct on target. </para>
        </briefdescription>
        <detaileddescription>
<para>Copies the 2D wall parameters from the offload struct to the struct on on target and sets the wall data pointer inside to the offload array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data struct on target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>the offload array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="wall/wall_2d.h" line="34" column="6" bodyfile="wall/wall_2d.c" bodystart="78" bodyend="83" declfile="wall/wall_2d.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="wall__2d_8h_1a4f30db1630e8d948ba0453bb7d8a55c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wall_2d_inside</definition>
        <argsstring>(real r, real z, wall_2d_data *w)</argsstring>
        <name>wall_2d_inside</name>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="structwall__2d__data" kindref="compound">wall_2d_data</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Check if coordinates are within 2D polygon wall. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the given coordinates are within the walls defind by a 2D polygon using a modified axis crossing method [1]. Origin is moved to the coordinates and the number of wall segments crossing the positive r-axis are calculated. If this is odd, the point is inside the polygon.</para>
<para>[1] D.G. Alciatore, R. Miranda. A Winding Number and Point-in-Polygon Algorithm. Technical report, Colorado State University, 1995. <ulink url="http://www.engr.colostate.edu/~dga/dga/papers/point_in_polygon.pdf">http://www.engr.colostate.edu/~dga/dga/papers/point_in_polygon.pdf</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>r coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>z coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>2D wall data structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="wall/wall_2d.h" line="37" column="5" bodyfile="wall/wall_2d.c" bodystart="101" bodyend="118" declfile="wall/wall_2d.h" declline="37" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="wall__2d_8h_1ae5498a77343a2e15ae59a07e4441c043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wall_2d_hit_wall</definition>
        <argsstring>(real r1, real phi1, real z1, real r2, real phi2, real z2, wall_2d_data *w)</argsstring>
        <name>wall_2d_hit_wall</name>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>r1</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>phi1</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>z1</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>r2</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>phi2</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>z2</declname>
        </param>
        <param>
          <type><ref refid="structwall__2d__data" kindref="compound">wall_2d_data</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Check if trajectory from (r1, phi1, z1) to (r2, phi2, z2) intersects the wall. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r1</parametername>
</parameternamelist>
<parameterdescription>
<para>start point R coordinate [m] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phi1</parametername>
</parameternamelist>
<parameterdescription>
<para>start point phi coordinate [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z1</parametername>
</parameternamelist>
<parameterdescription>
<para>start point z coordinate [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r2</parametername>
</parameternamelist>
<parameterdescription>
<para>end point R coordinate [m] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phi2</parametername>
</parameternamelist>
<parameterdescription>
<para>end point phi coordinate [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z2</parametername>
</parameternamelist>
<parameterdescription>
<para>end point z coordinate [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data struct on target</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>wall element ID if hit, zero otherwise</para>
</simplesect>
<xrefsect id="todo_1_todo000012"><xreftitle>Todo</xreftitle><xrefdescription><para>Right now this returns only a boolean wall for hit but not the wall ID </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="wall/wall_2d.h" line="39" column="5" bodyfile="wall/wall_2d.c" bodystart="136" bodyend="142" declfile="wall/wall_2d.h" declline="39" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Header file for <ref refid="wall__2d_8c" kindref="compound">wall_2d.c</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WALL_2D_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WALL_2D_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../ascot5.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="structwall__2d__offload__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13" refid="structwall__2d__offload__data_1acd8c3a1114f5f3bcc64d97fe06072c97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structwall__2d__offload__data_1acd8c3a1114f5f3bcc64d97fe06072c97" kindref="member">n</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="14" refid="structwall__2d__offload__data_1a7b4aa87f432f4cfad9704a42c29ef0e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structwall__2d__offload__data_1a7b4aa87f432f4cfad9704a42c29ef0e9" kindref="member">offload_array_length</ref>;<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal">}<sp/><ref refid="structwall__2d__offload__data" kindref="compound">wall_2d_offload_data</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structwall__2d__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="23" refid="structwall__2d__data_1a5eb56636a47f221b9d07ddb1227a7fcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structwall__2d__data_1a5eb56636a47f221b9d07ddb1227a7fcd" kindref="member">n</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24" refid="structwall__2d__data_1aa72c27ae0a1bc8240cdc4970edf717e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/><ref refid="structwall__2d__data_1aa72c27ae0a1bc8240cdc4970edf717e5" kindref="member">wall_r</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25" refid="structwall__2d__data_1a913174b09fb13d4bdfa2c9c2390776c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/><ref refid="structwall__2d__data_1a913174b09fb13d4bdfa2c9c2390776c1" kindref="member">wall_z</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal">}<sp/><ref refid="structwall__2d__data" kindref="compound">wall_2d_data</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wall__2d_8h_1a8e995d541a21a25b438cea528f046f7e" kindref="member">wall_2d_init_offload</ref>(<ref refid="structwall__2d__offload__data" kindref="compound">wall_2d_offload_data</ref>*<sp/>offload_data,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>offload_array);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wall__2d_8h_1a03243bd2237fc067855155ffcf4813f2" kindref="member">wall_2d_free_offload</ref>(<ref refid="structwall__2d__offload__data" kindref="compound">wall_2d_offload_data</ref>*<sp/>offload_data,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>offload_array);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>declare<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wall__2d_8h_1a417323f274cc169e65f270791b6955df" kindref="member">wall_2d_init</ref>(<ref refid="structwall__2d__data" kindref="compound">wall_2d_data</ref>*<sp/>w,<sp/><ref refid="structwall__2d__offload__data" kindref="compound">wall_2d_offload_data</ref>*<sp/>offload_data,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>offload_array);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>declare<sp/>simd<sp/>uniform(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wall__2d_8h_1a4f30db1630e8d948ba0453bb7d8a55c1" kindref="member">wall_2d_inside</ref>(<ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>r,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>z,<sp/><ref refid="structwall__2d__data" kindref="compound">wall_2d_data</ref>*<sp/>w);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>declare<sp/>simd<sp/>uniform(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wall__2d_8h_1ae5498a77343a2e15ae59a07e4441c043" kindref="member">wall_2d_hit_wall</ref>(<ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>r1,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>phi1,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>z1,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>r2,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>phi2,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>z2,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwall__2d__data" kindref="compound">wall_2d_data</ref>*<sp/>w);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>end<sp/>declare<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="wall/wall_2d.h"/>
  </compounddef>
</doxygen>
