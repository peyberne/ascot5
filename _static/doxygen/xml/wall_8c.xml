<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="wall_8c" kind="file" language="C++">
    <compoundname>wall.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes refid="math_8h" local="no">math.h</includes>
    <includes refid="ascot5_8h" local="yes">ascot5.h</includes>
    <includes refid="print_8h" local="yes">print.h</includes>
    <includes refid="wall_8h" local="yes">wall.h</includes>
    <includes refid="wall__2d_8h" local="yes">wall/wall_2d.h</includes>
    <includes refid="wall__3d_8h" local="yes">wall/wall_3d.h</includes>
    <incdepgraph>
      <node id="1">
        <label>wall.c</label>
        <link refid="wall_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>wall.h</label>
        <link refid="wall_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>omp.h</label>
      </node>
      <node id="6">
        <label>time.h</label>
      </node>
      <node id="3">
        <label>math.h</label>
        <link refid="math_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>wall/wall_3d.h</label>
        <link refid="wall__3d_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>print.h</label>
        <link refid="print_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>wall/wall_2d.h</label>
        <link refid="wall__2d_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ascot5.h</label>
        <link refid="ascot5_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="wall_8c_1a983cb9967c7259649a1ed01672fb0467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wall_init_offload</definition>
        <argsstring>(wall_offload_data *offload_data, real **offload_array, int **int_offload_array)</argsstring>
        <name>wall_init_offload</name>
        <param>
          <type><ref refid="structwall__offload__data" kindref="compound">wall_offload_data</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>offload_array</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>int_offload_array</declname>
        </param>
        <briefdescription>
<para>Load wall data and prepare parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fills the relevant wall offload struct with parameters and allocates and fills the offload array. Sets offload array length in the offload struct.</para>
<para>The offload data has to have a type when this function is called as it should be set when the offload data is constructed from inputs.</para>
<para>This function is host only.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to offload array storing integers</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if initialization succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="wall.c" line="42" column="5" bodyfile="wall.c" bodystart="42" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="wall_8c_1a8c4fbe663f4f86dadb70d3a23907a080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wall_free_offload</definition>
        <argsstring>(wall_offload_data *offload_data, real **offload_array, int **int_offload_array)</argsstring>
        <name>wall_free_offload</name>
        <param>
          <type><ref refid="structwall__offload__data" kindref="compound">wall_offload_data</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>offload_array</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>int_offload_array</declname>
        </param>
        <briefdescription>
<para>Free offload array and reset parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function deallocates the offload_array.</para>
<para>This function is host only.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to offload array storing integers </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="wall.c" line="91" column="6" bodyfile="wall.c" bodystart="91" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="wall_8c_1a988188cbb3aa23bc2bb5004ebca9b722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wall_init</definition>
        <argsstring>(wall_data *w, wall_offload_data *offload_data, real *offload_array, int *int_offload_array)</argsstring>
        <name>wall_init</name>
        <param>
          <type><ref refid="structwall__data" kindref="compound">wall_data</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="structwall__offload__data" kindref="compound">wall_offload_data</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>offload_array</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>int_offload_array</declname>
        </param>
        <briefdescription>
<para>Initialize wall data struct on target. </para>
        </briefdescription>
        <detaileddescription>
<para>This function copies the wall parameters from the offload struct to the struct on target and sets the wall data pointers to correct offsets in the offload array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data struct on target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to offload array storing integers</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="wall.c" line="119" column="5" bodyfile="wall.c" bodystart="119" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="wall_8c_1a66c9e2c7f3db0e3ccbf7507b45e4e5c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wall_hit_wall</definition>
        <argsstring>(real r1, real phi1, real z1, real r2, real phi2, real z2, wall_data *w, real *w_coll)</argsstring>
        <name>wall_hit_wall</name>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>r1</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>phi1</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>z1</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>r2</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>phi2</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>z2</declname>
        </param>
        <param>
          <type><ref refid="structwall__data" kindref="compound">wall_data</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>w_coll</declname>
        </param>
        <briefdescription>
<para>Check if a given directed line segment intersects the wall. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is intended to be used to check whether a marker collides with the wall. If there is a collision, this function returns an identification number specific to that wall tile. If the marker hits multiple wall elements, only the first one is returned.</para>
<para>This is a SIMD function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r1</parametername>
</parameternamelist>
<parameterdescription>
<para>start point R coordinate [m] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phi1</parametername>
</parameternamelist>
<parameterdescription>
<para>start point phi coordinate [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z1</parametername>
</parameternamelist>
<parameterdescription>
<para>start point z coordinate [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r2</parametername>
</parameternamelist>
<parameterdescription>
<para>end point R coordinate [m] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phi2</parametername>
</parameternamelist>
<parameterdescription>
<para>end point phi coordinate [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z2</parametername>
</parameternamelist>
<parameterdescription>
<para>end point z coordinate [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data struct on target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_coll</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer for storing the parameter in P = P1 + w_coll * (P2-P1), where P is the point where the collision occurred.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>wall element id if hit, zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="wall.c" line="163" column="5" bodyfile="wall.c" bodystart="163" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="wall_8c_1ad33cd65b0688785d3822cbb48c480cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wall_get_n_elements</definition>
        <argsstring>(wall_data *w)</argsstring>
        <name>wall_get_n_elements</name>
        <param>
          <type><ref refid="structwall__data" kindref="compound">wall_data</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Return the number of wall elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to wall data struct on target</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of wall elements or zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="wall.c" line="186" column="5" bodyfile="wall.c" bodystart="186" bodyend="198"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wall interface. </para>
    </briefdescription>
    <detaileddescription>
<para>This is an interface through which wall data is initialized and accessed. Reading e.g. from disk is done elsewhere.</para>
<para>To add a new wall instance, make sure these functions are implemented and called from this interface, and that <ref refid="wall_8h" kindref="compound">wall.h</ref> contains enum type for the new instance.</para>
<para>The interface checks which instance given data corresponds to from the &quot;type&quot;-field in <ref refid="structwall__offload__data" kindref="compound">wall_offload_data</ref> or <ref refid="structwall__data" kindref="compound">wall_data</ref> that is given as an argument, and calls the relevant function for that instance. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="math_8h" kindref="compound">math.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ascot5_8h" kindref="compound">ascot5.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8h" kindref="compound">print.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wall_8h" kindref="compound">wall.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wall__2d_8h" kindref="compound">wall/wall_2d.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wall__3d_8h" kindref="compound">wall/wall_3d.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="wall_8c_1a983cb9967c7259649a1ed01672fb0467" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wall_8c_1a983cb9967c7259649a1ed01672fb0467" kindref="member">wall_init_offload</ref>(<ref refid="structwall__offload__data" kindref="compound">wall_offload_data</ref>*<sp/>offload_data,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>offload_array,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>int_offload_array)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(offload_data-&gt;<ref refid="structwall__offload__data_1ac645b53810eaeee9dc03f1d0b0a13f28" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="wall_8h_1aa44ee0f90142da2a1da8771c19643633a048a41510bf053102285aedd82289ead" kindref="member">wall_type_2D</ref>:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="wall__2d_8c_1a8e995d541a21a25b438cea528f046f7e" kindref="member">wall_2d_init_offload</ref>(&amp;(offload_data-&gt;<ref refid="structwall__offload__data_1adf933c29d1a2d2f6dbacecb6276b4252" kindref="member">w2d</ref>),<sp/>offload_array);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structwall__offload__data_1a242a1130a7723b022ca4a69dc98040df" kindref="member">offload_array_length</ref><sp/>=</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structwall__offload__data_1adf933c29d1a2d2f6dbacecb6276b4252" kindref="member">w2d</ref>.<ref refid="structwall__2d__offload__data_1a7b4aa87f432f4cfad9704a42c29ef0e9" kindref="member">offload_array_length</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structwall__offload__data_1a36b5f32e1356e5f6ea96255603bdbd12" kindref="member">int_offload_array_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="wall_8h_1aa44ee0f90142da2a1da8771c19643633a4a27f13be1aef2a86b99d5518ca771ff" kindref="member">wall_type_3D</ref>:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="wall__3d_8c_1a95776be277218fa57c28c4b7f2154eca" kindref="member">wall_3d_init_offload</ref>(&amp;(offload_data-&gt;<ref refid="structwall__offload__data_1aa862f56c41f7d90a8acef24cb2258656" kindref="member">w3d</ref>),<sp/>offload_array,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structwall__offload__data_1a242a1130a7723b022ca4a69dc98040df" kindref="member">offload_array_length</ref><sp/>=</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structwall__offload__data_1aa862f56c41f7d90a8acef24cb2258656" kindref="member">w3d</ref>.<ref refid="structwall__3d__offload__data_1a162c5452003696ae67f6fa4d520a47bb" kindref="member">offload_array_length</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structwall__offload__data_1a36b5f32e1356e5f6ea96255603bdbd12" kindref="member">int_offload_array_length</ref><sp/>=</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structwall__offload__data_1aa862f56c41f7d90a8acef24cb2258656" kindref="member">w3d</ref>.<ref refid="structwall__3d__offload__data_1a3cbfeda67d335c40ed4b07123e30db66" kindref="member">int_offload_array_length</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unregonized<sp/>input.<sp/>Produce<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1ae9242d843e65413a3e5dba7129c75101" kindref="member">print_err</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Unregonized<sp/>electric<sp/>field<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!err)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_IO,<sp/></highlight><highlight class="stringliteral">&quot;Estimated<sp/>memory<sp/>usage<sp/>%.1f<sp/>MB\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structwall__offload__data_1a242a1130a7723b022ca4a69dc98040df" kindref="member">offload_array_length</ref></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>)<sp/>/<sp/>(1024.0*1024.0)<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="wall_8c_1a8c4fbe663f4f86dadb70d3a23907a080" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wall_8c_1a8c4fbe663f4f86dadb70d3a23907a080" kindref="member">wall_free_offload</ref>(<ref refid="structwall__offload__data" kindref="compound">wall_offload_data</ref>*<sp/>offload_data,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>offload_array,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>int_offload_array)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(offload_data-&gt;<ref refid="structwall__offload__data_1ac645b53810eaeee9dc03f1d0b0a13f28" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="wall_8h_1aa44ee0f90142da2a1da8771c19643633a048a41510bf053102285aedd82289ead" kindref="member">wall_type_2D</ref>:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wall__2d_8c_1a03243bd2237fc067855155ffcf4813f2" kindref="member">wall_2d_free_offload</ref>(&amp;(offload_data-&gt;<ref refid="structwall__offload__data_1adf933c29d1a2d2f6dbacecb6276b4252" kindref="member">w2d</ref>),<sp/>offload_array);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="wall_8h_1aa44ee0f90142da2a1da8771c19643633a4a27f13be1aef2a86b99d5518ca771ff" kindref="member">wall_type_3D</ref>:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wall__3d_8c_1abd94f5ab151031ee4dd86e757557c3c9" kindref="member">wall_3d_free_offload</ref>(&amp;(offload_data-&gt;<ref refid="structwall__offload__data_1aa862f56c41f7d90a8acef24cb2258656" kindref="member">w3d</ref>),<sp/>offload_array,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="wall_8c_1a988188cbb3aa23bc2bb5004ebca9b722" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wall_8c_1a988188cbb3aa23bc2bb5004ebca9b722" kindref="member">wall_init</ref>(<ref refid="structwall__data" kindref="compound">wall_data</ref>*<sp/>w,<sp/><ref refid="structwall__offload__data" kindref="compound">wall_offload_data</ref>*<sp/>offload_data,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>offload_array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>int_offload_array)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(offload_data-&gt;<ref refid="structwall__offload__data_1ac645b53810eaeee9dc03f1d0b0a13f28" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="wall_8h_1aa44ee0f90142da2a1da8771c19643633a048a41510bf053102285aedd82289ead" kindref="member">wall_type_2D</ref>:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wall__2d_8c_1a417323f274cc169e65f270791b6955df" kindref="member">wall_2d_init</ref>(&amp;(w-&gt;<ref refid="structwall__data_1ad33b5001672a8370a7d27da83c11656f" kindref="member">w2d</ref>),<sp/>&amp;(offload_data-&gt;<ref refid="structwall__offload__data_1adf933c29d1a2d2f6dbacecb6276b4252" kindref="member">w2d</ref>),<sp/>offload_array);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="wall_8h_1aa44ee0f90142da2a1da8771c19643633a4a27f13be1aef2a86b99d5518ca771ff" kindref="member">wall_type_3D</ref>:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wall__3d_8c_1a497356fffb82793491c87d8d375761e3" kindref="member">wall_3d_init</ref>(&amp;(w-&gt;<ref refid="structwall__data_1a99f61da522654d7c4771dd1cf1992378" kindref="member">w3d</ref>),<sp/>&amp;(offload_data-&gt;<ref refid="structwall__offload__data_1aa862f56c41f7d90a8acef24cb2258656" kindref="member">w3d</ref>),<sp/>offload_array,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unregonized<sp/>input.<sp/>Produce<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>w-&gt;<ref refid="structwall__data_1a535795020b69e3c55720658444e1d8a0" kindref="member">type</ref><sp/>=<sp/>offload_data-&gt;<ref refid="structwall__offload__data_1ac645b53810eaeee9dc03f1d0b0a13f28" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="wall_8c_1a66c9e2c7f3db0e3ccbf7507b45e4e5c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wall_8c_1a66c9e2c7f3db0e3ccbf7507b45e4e5c2" kindref="member">wall_hit_wall</ref>(<ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>r1,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>phi1,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>z1,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>r2,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>phi2,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>z2,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwall__data" kindref="compound">wall_data</ref>*<sp/>w,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>w_coll)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(w-&gt;<ref refid="structwall__data_1a535795020b69e3c55720658444e1d8a0" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="wall_8h_1aa44ee0f90142da2a1da8771c19643633a048a41510bf053102285aedd82289ead" kindref="member">wall_type_2D</ref>:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="wall__2d_8c_1ae5498a77343a2e15ae59a07e4441c043" kindref="member">wall_2d_hit_wall</ref>(r1,<sp/>phi1,<sp/>z1,<sp/>r2,<sp/>phi2,<sp/>z2,<sp/>&amp;(w-&gt;<ref refid="structwall__data_1ad33b5001672a8370a7d27da83c11656f" kindref="member">w2d</ref>));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="wall_8h_1aa44ee0f90142da2a1da8771c19643633a4a27f13be1aef2a86b99d5518ca771ff" kindref="member">wall_type_3D</ref>:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="wall__3d_8c_1aa387551bbbe9f7352a567cd466794ecc" kindref="member">wall_3d_hit_wall</ref>(r1,<sp/>phi1,<sp/>z1,<sp/>r2,<sp/>phi2,<sp/>z2,<sp/>&amp;(w-&gt;<ref refid="structwall__data_1a99f61da522654d7c4771dd1cf1992378" kindref="member">w3d</ref>),</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_coll);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="wall_8c_1ad33cd65b0688785d3822cbb48c480cda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wall_8c_1ad33cd65b0688785d3822cbb48c480cda" kindref="member">wall_get_n_elements</ref>(<ref refid="structwall__data" kindref="compound">wall_data</ref>*<sp/>w)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(w-&gt;<ref refid="structwall__data_1a535795020b69e3c55720658444e1d8a0" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="wall_8h_1aa44ee0f90142da2a1da8771c19643633a048a41510bf053102285aedd82289ead" kindref="member">wall_type_2D</ref>:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>w-&gt;<ref refid="structwall__data_1ad33b5001672a8370a7d27da83c11656f" kindref="member">w2d</ref>.<ref refid="structwall__2d__data_1a5eb56636a47f221b9d07ddb1227a7fcd" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="wall_8h_1aa44ee0f90142da2a1da8771c19643633a4a27f13be1aef2a86b99d5518ca771ff" kindref="member">wall_type_3D</ref>:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>w-&gt;<ref refid="structwall__data_1a99f61da522654d7c4771dd1cf1992378" kindref="member">w3d</ref>.<ref refid="structwall__3d__data_1ad7d1e0e0b8e007c938dc2582e21340c9" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="wall.c"/>
  </compounddef>
</doxygen>
