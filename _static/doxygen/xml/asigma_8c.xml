<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="asigma_8c" kind="file" language="C++">
    <compoundname>asigma.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="math_8h" local="no">math.h</includes>
    <includes refid="ascot5_8h" local="yes">ascot5.h</includes>
    <includes refid="print_8h" local="yes">print.h</includes>
    <includes refid="error_8h" local="yes">error.h</includes>
    <includes refid="asigma_8h" local="yes">asigma.h</includes>
    <includes refid="asigma__loc_8h" local="yes">asigma/asigma_loc.h</includes>
    <includes refid="consts_8h" local="yes">consts.h</includes>
    <incdepgraph>
      <node id="12">
        <label>../spline/interp.h</label>
        <link refid="interp_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>asigma.c</label>
        <link refid="asigma_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>asigma.h</label>
        <link refid="asigma_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>asigma/asigma_loc.h</label>
        <link refid="asigma__loc_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>omp.h</label>
      </node>
      <node id="13">
        <label>consts.h</label>
        <link refid="consts_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>time.h</label>
      </node>
      <node id="4">
        <label>math.h</label>
        <link refid="math_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>print.h</label>
        <link refid="print_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ascot5.h</label>
        <link refid="ascot5_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="asigma_8c_1aea2ea2d3f324bbebabcc9fca5571a125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int asigma_init_offload</definition>
        <argsstring>(asigma_offload_data *offload_data, real **offload_array)</argsstring>
        <name>asigma_init_offload</name>
        <param>
          <type><ref refid="structasigma__offload__data" kindref="compound">asigma_offload_data</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>offload_array</declname>
        </param>
        <briefdescription>
<para>Load atomic reaction data and prepare parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fills the relevant atomic sigma offload struct with parameters and allocates and fills the offload array. Sets offload array length in the offload struct.</para>
<para>The offload data has to have a type when this function is called as it should be set when the offload data is constructed from inputs.</para>
<para>This function is host only.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to offload array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if initialization succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asigma.c" line="49" column="5" bodyfile="asigma.c" bodystart="49" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="asigma_8c_1a721a595985f53e0168f79335ec52e8b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void asigma_free_offload</definition>
        <argsstring>(asigma_offload_data *offload_data, real **offload_array)</argsstring>
        <name>asigma_free_offload</name>
        <param>
          <type><ref refid="structasigma__offload__data" kindref="compound">asigma_offload_data</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>offload_array</declname>
        </param>
        <briefdescription>
<para>Free offload array and reset parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function deallocates the offload_array.</para>
<para>This function is host only.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to offload array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asigma.c" line="87" column="6" bodyfile="asigma.c" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="asigma_8c_1abc316bf66d9864a848f4adeaad8db5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int asigma_init</definition>
        <argsstring>(asigma_data *asgm_data, asigma_offload_data *offload_data, real *offload_array)</argsstring>
        <name>asigma_init</name>
        <param>
          <type><ref refid="structasigma__data" kindref="compound">asigma_data</ref> *</type>
          <declname>asgm_data</declname>
        </param>
        <param>
          <type><ref refid="structasigma__offload__data" kindref="compound">asigma_offload_data</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>offload_array</declname>
        </param>
        <briefdescription>
<para>Initializes atomic reaction data struct on target. </para>
        </briefdescription>
        <detaileddescription>
<para>This function copies some atomic reaction parameters from the offload struct to the struct on target and sets the atomic reaction data pointers to correct offsets in the offload array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asgm_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data struct on target </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if initialization succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asigma.c" line="109" column="5" bodyfile="asigma.c" bodystart="109" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="asigma_8c_1a62ee4657dca941a26cfa1ef96405362c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="error_8h_1a3bca029fa2975420f00b89f3cb38872e" kindref="member">a5err</ref></type>
        <definition>a5err asigma_eval_sigma</definition>
        <argsstring>(real *sigma, int z_1, int a_1, int z_2, int a_2, int reac_type, asigma_data *asigma_data, real E_coll_per_amu, int *enable_atomic)</argsstring>
        <name>asigma_eval_sigma</name>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>z_1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>z_2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reac_type</declname>
        </param>
        <param>
          <type><ref refid="structasigma__data" kindref="compound">asigma_data</ref> *</type>
          <declname>asigma_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>E_coll_per_amu</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>enable_atomic</declname>
        </param>
        <briefdescription>
<para>Evaluate atomic reaction cross-section. </para>
        </briefdescription>
        <detaileddescription>
<para>This function evaluates the cross-section (sigma) for the atomic reaction corresponding to the reaction identifiers given as parameters at the given mass-normalized collision energy.</para>
<para>This is a SIMD function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to evaluated cross-section </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_1</parametername>
</parameternamelist>
<parameterdescription>
<para>atomic number of fast particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_1</parametername>
</parameternamelist>
<parameterdescription>
<para>atomic mass number of fast particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_2</parametername>
</parameternamelist>
<parameterdescription>
<para>atomic number of bulk particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_2</parametername>
</parameternamelist>
<parameterdescription>
<para>atomic mass number of bulk particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reac_type</parametername>
</parameternamelist>
<parameterdescription>
<para>reaction type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structasigma__data" kindref="compound">asigma_data</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to atomic data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E_coll_per_amu</parametername>
</parameternamelist>
<parameterdescription>
<para>energy per amu corresponding to collision speed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_atomic</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to atomic enable and functionality flag</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero a5err value if evaluation failed, zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asigma.c" line="151" column="7" bodyfile="asigma.c" bodystart="151" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="asigma_8c_1a13e3c6fd6ce518a59fdf68ebc57ed279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="error_8h_1a3bca029fa2975420f00b89f3cb38872e" kindref="member">a5err</ref></type>
        <definition>a5err asigma_eval_sigmav</definition>
        <argsstring>(real *sigmav, int z_1, int a_1, real m_1, int z_2, int a_2, int reac_type, asigma_data *asigma_data, real E, real T_e, real T_0, real n_i, int *enable_atomic)</argsstring>
        <name>asigma_eval_sigmav</name>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>sigmav</declname>
        </param>
        <param>
          <type>int</type>
          <declname>z_1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_1</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>m_1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>z_2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reac_type</declname>
        </param>
        <param>
          <type><ref refid="structasigma__data" kindref="compound">asigma_data</ref> *</type>
          <declname>asigma_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>E</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>T_e</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>T_0</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref></type>
          <declname>n_i</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>enable_atomic</declname>
        </param>
        <briefdescription>
<para>Evaluate atomic reaction rate coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>This function evaluates the rate coefficient (&lt;sigma*v&gt;) for the atomic reaction corresponding to the reaction identifiers given as parameters at the given fast particle energy and bulk plasma conditions.</para>
<para>This is a SIMD function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sigmav</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to evaluated rate coefficient </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_1</parametername>
</parameternamelist>
<parameterdescription>
<para>atomic number of fast particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_1</parametername>
</parameternamelist>
<parameterdescription>
<para>atomic mass number of fast particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m_1</parametername>
</parameternamelist>
<parameterdescription>
<para>mass of fast particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_2</parametername>
</parameternamelist>
<parameterdescription>
<para>atomic number of bulk particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_2</parametername>
</parameternamelist>
<parameterdescription>
<para>atomic mass number of bulk particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reac_type</parametername>
</parameternamelist>
<parameterdescription>
<para>reaction type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structasigma__data" kindref="compound">asigma_data</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to atomic data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>energy of fast particle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_e</parametername>
</parameternamelist>
<parameterdescription>
<para>electron temperature of bulk plasma </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_0</parametername>
</parameternamelist>
<parameterdescription>
<para>temperature of bulk neutrals </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_i</parametername>
</parameternamelist>
<parameterdescription>
<para>ion density of bulk plasma </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_atomic</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to atomic enable and functionality flag</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero a5err value if evaluation failed, zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asigma.c" line="206" column="7" bodyfile="asigma.c" bodystart="206" bodyend="232"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Atomic reaction data interface. </para>
    </briefdescription>
    <detaileddescription>
<para>This is an interface through which atomic reaction data is initialized and accessed. Reading, for example from local files, is done elsewhere.</para>
<para>The name asigma is short for atomicsigma. The word sigma refers to cross-section, a fundamental type of reaction probability data. Note that the data is not necessarily in the form of pure cross-sections. It might be in some derivative form, such as rate coefficients.</para>
<para>To add a new atomic reaction data instance, make sure the functions are implemented and called from this interface, and that <ref refid="asigma_8h" kindref="compound">asigma.h</ref> contains enum type for the new instance.</para>
<para>The interface checks which instance given data corresponds to from the &quot;type&quot;-field in <ref refid="structasigma__offload__data" kindref="compound">asigma_offload_data</ref> or <ref refid="structasigma__data" kindref="compound">asigma_data</ref> that is given as an argument, and calls the relevant function for that instance. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="math_8h" kindref="compound">math.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ascot5_8h" kindref="compound">ascot5.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8h" kindref="compound">print.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="error_8h" kindref="compound">error.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="math_8h" kindref="compound">math.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asigma_8h" kindref="compound">asigma.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asigma__loc_8h" kindref="compound">asigma/asigma_loc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="consts_8h" kindref="compound">consts.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="asigma_8c_1aea2ea2d3f324bbebabcc9fca5571a125" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="asigma_8c_1aea2ea2d3f324bbebabcc9fca5571a125" kindref="member">asigma_init_offload</ref>(<ref refid="structasigma__offload__data" kindref="compound">asigma_offload_data</ref>*<sp/>offload_data,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>offload_array)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(offload_data-&gt;<ref refid="structasigma__offload__data_1a22649daa5f9a9ea3ba4caac5991821cb" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="asigma_8h_1ae46aca98722780bc5950aa6c1636282caaa16955b272b342595baa6c3a04221f6" kindref="member">asigma_type_loc</ref>:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="asigma__loc_8c_1ad6ae96a2cb0590cd50dfa7d4141177fb" kindref="member">asigma_loc_init_offload</ref>(&amp;(offload_data-&gt;<ref refid="structasigma__offload__data_1a8c0884325fa9038f44451dc3654bb306" kindref="member">asigma_loc</ref>),</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_array);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structasigma__offload__data_1a91bd61350679824f725402d02e4012a5" kindref="member">offload_array_length</ref><sp/>=</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structasigma__offload__data_1a8c0884325fa9038f44451dc3654bb306" kindref="member">asigma_loc</ref>.<ref refid="structasigma__loc__offload__data_1ab14837a11f42a4ca604e150a5d8c195c" kindref="member">offload_array_length</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unrecognized<sp/>input.<sp/>Produce<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1ae9242d843e65413a3e5dba7129c75101" kindref="member">print_err</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Unrecognized<sp/>atomic<sp/>reaction<sp/>data<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!err)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_IO,<sp/></highlight><highlight class="stringliteral">&quot;Estimated<sp/>memory<sp/>usage<sp/>%.1f<sp/>MB\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_data-&gt;<ref refid="structasigma__offload__data_1a91bd61350679824f725402d02e4012a5" kindref="member">offload_array_length</ref></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>)<sp/>/<sp/>(1024.0*1024.0)<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="asigma_8c_1a721a595985f53e0168f79335ec52e8b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="asigma_8c_1a721a595985f53e0168f79335ec52e8b1" kindref="member">asigma_free_offload</ref>(<ref refid="structasigma__offload__data" kindref="compound">asigma_offload_data</ref>*<sp/>offload_data,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>offload_array)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(offload_data-&gt;<ref refid="structasigma__offload__data_1a22649daa5f9a9ea3ba4caac5991821cb" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="asigma_8h_1ae46aca98722780bc5950aa6c1636282caaa16955b272b342595baa6c3a04221f6" kindref="member">asigma_type_loc</ref>:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asigma__loc_8c_1a0a7a72ac7558be5dc0868c54e1de880c" kindref="member">asigma_loc_free_offload</ref>(&amp;(offload_data-&gt;<ref refid="structasigma__offload__data_1a8c0884325fa9038f44451dc3654bb306" kindref="member">asigma_loc</ref>),<sp/>offload_array);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="asigma_8c_1abc316bf66d9864a848f4adeaad8db5b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="asigma_8c_1abc316bf66d9864a848f4adeaad8db5b5" kindref="member">asigma_init</ref>(<ref refid="structasigma__data" kindref="compound">asigma_data</ref>*<sp/>asgm_data,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasigma__offload__data" kindref="compound">asigma_offload_data</ref>*<sp/>offload_data,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>offload_array)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(offload_data-&gt;<ref refid="structasigma__offload__data_1a22649daa5f9a9ea3ba4caac5991821cb" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="asigma_8h_1ae46aca98722780bc5950aa6c1636282caaa16955b272b342595baa6c3a04221f6" kindref="member">asigma_type_loc</ref>:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asigma__loc_8c_1a6b81320e02a2e9f940098fe4398b0751" kindref="member">asigma_loc_init</ref>(&amp;(asgm_data-&gt;<ref refid="structasigma__data_1a78e6881e1fe3408a81e933eba6a359a3" kindref="member">asigma_loc</ref>),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(offload_data-&gt;<ref refid="structasigma__offload__data_1a8c0884325fa9038f44451dc3654bb306" kindref="member">asigma_loc</ref>),<sp/>offload_array);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unrecognized<sp/>input.<sp/>Produce<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1ae9242d843e65413a3e5dba7129c75101" kindref="member">print_err</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Unrecognized<sp/>atomic<sp/>reaction<sp/>data<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>asgm_data-&gt;<ref refid="structasigma__data_1a75426d22a3a03f3c627dc0612d68faea" kindref="member">type</ref><sp/>=<sp/>offload_data-&gt;<ref refid="structasigma__offload__data_1a22649daa5f9a9ea3ba4caac5991821cb" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="asigma_8c_1a62ee4657dca941a26cfa1ef96405362c" refkind="member"><highlight class="normal"><ref refid="error_8h_1a3bca029fa2975420f00b89f3cb38872e" kindref="member">a5err</ref><sp/><ref refid="asigma_8c_1a62ee4657dca941a26cfa1ef96405362c" kindref="member">asigma_eval_sigma</ref>(</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>sigma,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reac_type,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasigma__data" kindref="compound">asigma_data</ref>*<sp/><ref refid="structasigma__data" kindref="compound">asigma_data</ref>,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>E_coll_per_amu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>enable_atomic)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="error_8h_1a3bca029fa2975420f00b89f3cb38872e" kindref="member">a5err</ref><sp/>err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<ref refid="structasigma__data" kindref="compound">asigma_data</ref>-&gt;<ref refid="structasigma__data_1a75426d22a3a03f3c627dc0612d68faea" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="asigma_8h_1ae46aca98722780bc5950aa6c1636282caaa16955b272b342595baa6c3a04221f6" kindref="member">asigma_type_loc</ref>:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="asigma__loc_8c_1aa2f227311a33867c2430c1c32232f498" kindref="member">asigma_loc_eval_sigma</ref>(sigma,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_1,<sp/>a_1,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_2,<sp/>a_2,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reac_type,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(<ref refid="structasigma__data" kindref="compound">asigma_data</ref>-&gt;<ref refid="structasigma__data_1a78e6881e1fe3408a81e933eba6a359a3" kindref="member">asigma_loc</ref>),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_coll_per_amu,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_atomic);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unrecognized<sp/>input.<sp/>Produce<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="error_8h_1a580a0b8b4a823a26a00b2f83d9343bc4" kindref="member">error_raise</ref>(<sp/><ref refid="error_8h_1a6756b9f30781ed8ca8ce938e49ad9d92ac2125be888742dd78b8d8bd4fc40b5b7" kindref="member">ERR_UNKNOWN_INPUT</ref>,<sp/>__LINE__,<sp/><ref refid="error_8h_1a4e101179605aba551caa2576fd83a1dda1b0540b254563bdd6aa069aa414e64ed" kindref="member">EF_ASIGMA</ref><sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(err<sp/>||<sp/>sigma[0]<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>of<sp/>error<sp/>or<sp/>unphysical<sp/>negative<sp/>value,<sp/>return<sp/>zero<sp/>value</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>avoid<sp/>further<sp/>complications<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma[0]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="asigma_8c_1a13e3c6fd6ce518a59fdf68ebc57ed279" refkind="member"><highlight class="normal"><ref refid="error_8h_1a3bca029fa2975420f00b89f3cb38872e" kindref="member">a5err</ref><sp/><ref refid="asigma_8c_1a13e3c6fd6ce518a59fdf68ebc57ed279" kindref="member">asigma_eval_sigmav</ref>(</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>sigmav,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_1,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>m_1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reac_type,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasigma__data" kindref="compound">asigma_data</ref>*<sp/><ref refid="structasigma__data" kindref="compound">asigma_data</ref>,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>E,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>T_e,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>T_0,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>n_i,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>enable_atomic)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="error_8h_1a3bca029fa2975420f00b89f3cb38872e" kindref="member">a5err</ref><sp/>err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<ref refid="structasigma__data" kindref="compound">asigma_data</ref>-&gt;<ref refid="structasigma__data_1a75426d22a3a03f3c627dc0612d68faea" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="asigma_8h_1ae46aca98722780bc5950aa6c1636282caaa16955b272b342595baa6c3a04221f6" kindref="member">asigma_type_loc</ref>:</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="asigma__loc_8c_1ae93bf78b3c379165625874f2bdb22106" kindref="member">asigma_loc_eval_sigmav</ref>(</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigmav,<sp/>z_1,<sp/>a_1,<sp/>m_1,<sp/>z_2,<sp/>a_2,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reac_type,<sp/>&amp;(<ref refid="structasigma__data" kindref="compound">asigma_data</ref>-&gt;<ref refid="structasigma__data_1a78e6881e1fe3408a81e933eba6a359a3" kindref="member">asigma_loc</ref>),</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E,<sp/>T_e,<sp/>T_0,<sp/>n_i,<sp/>enable_atomic);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unrecognized<sp/>input.<sp/>Produce<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="error_8h_1a580a0b8b4a823a26a00b2f83d9343bc4" kindref="member">error_raise</ref>(<sp/><ref refid="error_8h_1a6756b9f30781ed8ca8ce938e49ad9d92ac2125be888742dd78b8d8bd4fc40b5b7" kindref="member">ERR_UNKNOWN_INPUT</ref>,<sp/>__LINE__,<sp/><ref refid="error_8h_1a4e101179605aba551caa2576fd83a1dda1b0540b254563bdd6aa069aa414e64ed" kindref="member">EF_ASIGMA</ref><sp/>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(err<sp/>||<sp/>sigmav[0]<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>of<sp/>error<sp/>or<sp/>unphysical<sp/>negative<sp/>value,<sp/>return<sp/>zero<sp/>value</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>avoid<sp/>further<sp/>complications<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigmav[0]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="asigma.c"/>
  </compounddef>
</doxygen>
