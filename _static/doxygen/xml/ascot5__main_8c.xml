<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ascot5__main_8c" kind="file" language="C++">
    <compoundname>ascot5_main.c</compoundname>
    <includes local="no">getopt.h</includes>
    <includes refid="math_8h" local="no">math.h</includes>
    <includes local="no">omp.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">time.h</includes>
    <includes refid="ascot5_8h" local="yes">ascot5.h</includes>
    <includes refid="consts_8h" local="yes">consts.h</includes>
    <includes refid="wall_8h" local="yes">wall.h</includes>
    <includes refid="diag_8h" local="yes">diag.h</includes>
    <includes refid="B__field_8h" local="yes">B_field.h</includes>
    <includes refid="plasma_8h" local="yes">plasma.h</includes>
    <includes refid="print_8h" local="yes">print.h</includes>
    <includes refid="simulate_8h" local="yes">simulate.h</includes>
    <includes refid="particle_8h" local="yes">particle.h</includes>
    <includes refid="endcond_8h" local="yes">endcond.h</includes>
    <includes refid="hdf5__interface_8h" local="yes">hdf5_interface.h</includes>
    <includes refid="offload_8h" local="yes">offload.h</includes>
    <includes refid="gitver_8h" local="yes">gitver.h</includes>
    <includes refid="mpi__interface_8h" local="yes">mpi_interface.h</includes>
    <includes refid="ascot5__main_8h" local="yes">ascot5_main.h</includes>
    <incdepgraph>
      <node id="30">
        <label>diag/dist_rho5D.h</label>
        <link refid="dist__rho5D_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>plasma.h</label>
        <link refid="plasma_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>diag/dist_5D.h</label>
        <link refid="dist__5D_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>particle.h</label>
        <link refid="particle_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>diag.h</label>
        <link refid="diag_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>../spline/interp.h</label>
        <link refid="interp_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>simulate.h</label>
        <link refid="simulate_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Bfield/B_GS.h</label>
        <link refid="B__GS_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ascot5_main.c</label>
        <link refid="ascot5__main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>wall.h</label>
        <link refid="wall_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>ascot5_main.h</label>
        <link refid="ascot5__main_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>asigma.h</label>
        <link refid="asigma_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>plasma/plasma_1DS.h</label>
        <link refid="plasma__1DS_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>mhd/mhd_nonstat.h</label>
        <link refid="mhd__nonstat_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>endcond.h</label>
        <link refid="endcond_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="53">
        <label>simulate/mccc/mccc.h</label>
        <link refid="mccc_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>gitver.h</label>
        <link refid="gitver_8h_source"/>
      </node>
      <node id="49">
        <label>asigma/asigma_loc.h</label>
        <link refid="asigma__loc_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>nbi.h</label>
        <link refid="nbi_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>diag/diag_orb.h</label>
        <link refid="diag__orb_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>omp.h</label>
      </node>
      <node id="9">
        <label>consts.h</label>
        <link refid="consts_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>mccc_wiener.h</label>
        <link refid="mccc__wiener_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>neutral/N0_3D.h</label>
        <link refid="N0__3D_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>B_field.h</label>
        <link refid="B__field_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>mhd/mhd_stat.h</label>
        <link refid="mhd__stat_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Efield/E_1DS.h</label>
        <link refid="E__1DS_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>neutral/N0_1D.h</label>
        <link refid="N0__1D_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>plasma/plasma_1Dt.h</label>
        <link refid="plasma__1Dt_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="41">
        <label>neutral.h</label>
        <link refid="neutral_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>mpi_interface.h</label>
        <link refid="mpi__interface_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>hdf5_interface.h</label>
        <link refid="hdf5__interface_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>diag/dist_com.h</label>
        <link refid="dist__com_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>hdf5.h</label>
      </node>
      <node id="34">
        <label>diag/diag_transcoef.h</label>
        <link refid="diag__transcoef_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>E_field.h</label>
        <link refid="E__field_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>plasma/plasma_1D.h</label>
        <link refid="plasma__1D_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>time.h</label>
      </node>
      <node id="24">
        <label>Bfield/B_TC.h</label>
        <link refid="B__TC_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>../linint/linint.h</label>
        <link refid="linint_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>getopt.h</label>
      </node>
      <node id="19">
        <label>Bfield/B_2DS.h</label>
        <link refid="B__2DS_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>mhd.h</label>
        <link refid="mhd_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Efield/E_TC.h</label>
        <link refid="E__TC_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>boozer.h</label>
        <link refid="boozer_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Bfield/B_3DS.h</label>
        <link refid="B__3DS_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>math.h</label>
        <link refid="math_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>diag/dist_6D.h</label>
        <link refid="dist__6D_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>wall/wall_3d.h</label>
        <link refid="wall__3d_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>offload.h</label>
        <link refid="offload_8h"/>
      </node>
      <node id="17">
        <label>stdio.h</label>
      </node>
      <node id="31">
        <label>diag/dist_rho6D.h</label>
        <link refid="dist__rho6D_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Bfield/B_STS.h</label>
        <link refid="B__STS_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>print.h</label>
        <link refid="print_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>wall/wall_2d.h</label>
        <link refid="wall__2d_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ascot5.h</label>
        <link refid="ascot5_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ascot5__main_8c_1a78c99ffd76a7bb3c8c74db76207e9ab4" prot="public" static="no">
        <name>_XOPEN_SOURCE</name>
        <initializer>500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>drand48 requires POSIX 1995 standard </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ascot5_main.c" line="54" column="9" bodyfile="ascot5_main.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ascot5__main_8c_1aab0725951621a452e478e9f76402f5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_arguments</definition>
        <argsstring>(int argc, char **argv, sim_offload_data *sim)</argsstring>
        <name>read_arguments</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref> *</type>
          <declname>sim</declname>
        </param>
        <briefdescription>
<para>Read command line arguments and modify sim struct accordingly. </para>
        </briefdescription>
        <detaileddescription>
<para>The command line arguments are in, out, mpi_size, and mpi_rank which correspond to input file, output file, number of MPI processes and the rank of this process. These are stored in simulation offload data struct as (default values, used if the specific argument was not given, are in parenthesis):</para>
<para><itemizedlist>
<listitem><para>sim-&gt;hdf5_in = &quot;in.h5&quot; (&quot;ascot.h5&quot;)</para>
</listitem><listitem><para>sim-&gt;hdf5_out = &quot;out&quot; (sim-&gt;hdf5_in is copied here)</para>
</listitem><listitem><para>sim-&gt;mpi_rank = 0</para>
</listitem><listitem><para>sim-&gt;mpi_size = 0</para>
</listitem><listitem><para>sim-&gt;desc = &quot;No description&quot;</para>
</listitem></itemizedlist>
</para>
<para>If the arguments could not be parsed, this function returns a non-zero exit value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>argument count as given to <ref refid="ascot5__main_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>argument vector as given to <ref refid="ascot5__main_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sim</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload data struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ascot5_main.c" line="631" column="5" bodyfile="ascot5_main.c" bodystart="631" bodyend="779" declfile="ascot5_main.c" declline="83" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ascot5__main_8c_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Main function for ascot5_main. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calls functions that read input data from the disk, and functions that initialize the offload data structs and offload arrays. Actual simulation is done by calling <ref refid="simulate_8c_1a731ec48c95f5641ae30d383ba7d5d387" kindref="member">simulate()</ref>. Once the simulation has been completed, offload arrays are deallocated and the results are written to the disk.</para>
<para>MPI level parallelisation is done here as well as the offloading.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>argument count of the command line arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>argument vector of the command line arguments</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if simulation was completed with no issues </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ascot5_main.c" line="101" column="5" bodyfile="ascot5_main.c" bodystart="101" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="ascot5__main_8c_1a06aa2611d6955391a69dfcf397c674b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int prepare_markers</definition>
        <argsstring>(sim_offload_data *sim, int mpi_size, int mpi_rank, int n_tot, input_particle **pin, particle_state **pout, int *nprts, real *B_offload_array)</argsstring>
        <name>prepare_markers</name>
        <param>
          <type><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref> *</type>
          <declname>sim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mpi_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mpi_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_tot</declname>
        </param>
        <param>
          <type><ref refid="structinput__particle" kindref="compound">input_particle</ref> **</type>
          <declname>pin</declname>
        </param>
        <param>
          <type><ref refid="structparticle__state" kindref="compound">particle_state</ref> **</type>
          <declname>pout</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nprts</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>B_offload_array</declname>
        </param>
        <briefdescription>
<para>Prepare markers for offload. </para>
        </briefdescription>
        <detaileddescription>
<para>Marker states are initialized here and stored in a single array, which then can be offloaded to the target.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sim</parametername>
</parameternamelist>
<parameterdescription>
<para>simulation offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpi_size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of MPI processes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpi_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>rank of this MPI process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_tot</parametername>
</parameternamelist>
<parameterdescription>
<para>total number of markers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to marker input array which is deallocated here </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pout</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to marker state array created here </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nprts</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to variable for number of markers for this process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to magnetic field data needed for marker init</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ascot5_main.c" line="270" column="5" bodyfile="ascot5_main.c" bodystart="270" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="ascot5__main_8c_1a1c47ac3fc9b50c894c452283725c7052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pack_offload_array</definition>
        <argsstring>(sim_offload_data *sim, offload_package *offload_data, real **B_offload_array, real **E_offload_array, real **plasma_offload_array, real **neutral_offload_array, real **wall_offload_array, int **wall_int_offload_array, real **boozer_offload_array, real **mhd_offload_array, real **asigma_offload_array, real **offload_array, int **int_offload_array)</argsstring>
        <name>pack_offload_array</name>
        <param>
          <type><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref> *</type>
          <declname>sim</declname>
        </param>
        <param>
          <type><ref refid="structoffload__package" kindref="compound">offload_package</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>B_offload_array</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>E_offload_array</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>plasma_offload_array</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>neutral_offload_array</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>wall_offload_array</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>wall_int_offload_array</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>boozer_offload_array</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>mhd_offload_array</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>asigma_offload_array</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>offload_array</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>int_offload_array</declname>
        </param>
        <briefdescription>
<para>Prepare offload array to be offloaded. </para>
        </briefdescription>
        <detaileddescription>
<para>When data is read, it is stored to input specific offload arrays which are packed as a single array here (two actually as one array contains integers and the other floats). The initial individual arrays are deallocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sim</parametername>
</parameternamelist>
<parameterdescription>
<para>simulation offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>empty offload package </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>magnetic field offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>electric field offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plasma_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>plasma offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neutral_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>neutrals offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wall_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>wall offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wall_int_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>wall integer offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boozer_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>boozer offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mhd_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>MHD data offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asigma_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>atomic data offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to common offload array created here </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to common offload integer array created here</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ascot5_main.c" line="334" column="5" bodyfile="ascot5_main.c" bodystart="334" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="ascot5__main_8c_1ab65b27e3eb40c198e345865c4a4a2950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int write_rungroup</definition>
        <argsstring>(sim_offload_data *sim, int mpi_size, int mpi_rank, int mpi_root, int n_tot, particle_state *ps, char *qid)</argsstring>
        <name>write_rungroup</name>
        <param>
          <type><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref> *</type>
          <declname>sim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mpi_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mpi_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mpi_root</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_tot</declname>
        </param>
        <param>
          <type><ref refid="structparticle__state" kindref="compound">particle_state</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>qid</declname>
        </param>
        <briefdescription>
<para>Create and store run group and marker inistate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sim</parametername>
</parameternamelist>
<parameterdescription>
<para>simulation offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpi_size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of MPI processes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpi_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>rank of this MPI process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpi_root</parametername>
</parameternamelist>
<parameterdescription>
<para>rank of the root process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_tot</parametername>
</parameternamelist>
<parameterdescription>
<para>total number of markers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>marker state array for this process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qid</parametername>
</parameternamelist>
<parameterdescription>
<para>unique identifier for this run group</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ascot5_main.c" line="404" column="5" bodyfile="ascot5_main.c" bodystart="404" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="ascot5__main_8c_1a99f525f561d0ebaf51c4f44a89dd6d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int offload_and_simulate</definition>
        <argsstring>(sim_offload_data *sim, int mpi_size, int mpi_rank, int mpi_root, int n_tot, int nprts, particle_state *pin, offload_package *offload_data, real *offload_array, int *int_offload_array, int *n_gathered, particle_state **pout, real **diag_offload_array)</argsstring>
        <name>offload_and_simulate</name>
        <param>
          <type><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref> *</type>
          <declname>sim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mpi_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mpi_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mpi_root</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_tot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nprts</declname>
        </param>
        <param>
          <type><ref refid="structparticle__state" kindref="compound">particle_state</ref> *</type>
          <declname>pin</declname>
        </param>
        <param>
          <type><ref refid="structoffload__package" kindref="compound">offload_package</ref> *</type>
          <declname>offload_data</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>offload_array</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>int_offload_array</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n_gathered</declname>
        </param>
        <param>
          <type><ref refid="structparticle__state" kindref="compound">particle_state</ref> **</type>
          <declname>pout</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>diag_offload_array</declname>
        </param>
        <briefdescription>
<para>Offload data to target, carry out the simulation, and return to host. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sim</parametername>
</parameternamelist>
<parameterdescription>
<para>simulation offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpi_size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of MPI processes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpi_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>rank of this MPI process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpi_root</parametername>
</parameternamelist>
<parameterdescription>
<para>rank of the root process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_tot</parametername>
</parameternamelist>
<parameterdescription>
<para>total number of markers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nprts</parametername>
</parameternamelist>
<parameterdescription>
<para>number of markers in this process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>marker state array for this process (deallocated here) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_data</parametername>
</parameternamelist>
<parameterdescription>
<para>packed offload data struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>packed offload array containing the input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>packed offload integer array containg the input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_gathered</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer for storing number of simulated markers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pout</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to array containing all marker endstates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diag_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>allocated array to return output data from target</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ascot5_main.c" line="467" column="5" bodyfile="ascot5_main.c" bodystart="467" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="ascot5__main_8c_1af26432295137ec027bfa2d1db823148f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int write_output</definition>
        <argsstring>(sim_offload_data *sim, int mpi_rank, int mpi_root, particle_state *ps_gathered, int n_gathered, real *diag_offload_array)</argsstring>
        <name>write_output</name>
        <param>
          <type><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref> *</type>
          <declname>sim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mpi_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mpi_root</declname>
        </param>
        <param>
          <type><ref refid="structparticle__state" kindref="compound">particle_state</ref> *</type>
          <declname>ps_gathered</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_gathered</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>diag_offload_array</declname>
        </param>
        <briefdescription>
<para>Store simulation output data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sim</parametername>
</parameternamelist>
<parameterdescription>
<para>simulation offload data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpi_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>rank of this MPI process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpi_root</parametername>
</parameternamelist>
<parameterdescription>
<para>rank of the root process (which does the writing) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ps_gathered</parametername>
</parameternamelist>
<parameterdescription>
<para>marker state array containing the end states </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_gathered</parametername>
</parameternamelist>
<parameterdescription>
<para>number of simulated markers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diag_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>diagnostics offload data array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ascot5_main.c" line="564" column="5" bodyfile="ascot5_main.c" bodystart="564" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="ascot5__main_8c_1a73cfeb9193341aff90367f8425e40f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_marker_summary</definition>
        <argsstring>(particle_state *ps, int n_tot)</argsstring>
        <name>print_marker_summary</name>
        <param>
          <type><ref refid="structparticle__state" kindref="compound">particle_state</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_tot</declname>
        </param>
        <briefdescription>
<para>Writes a summary of what happened to the markers during simulation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function writes a summary of marker end conditions and possible simulation-time errors. Since simulation can have billions and billions of markers, we only show how many markers had specific error or end condition.</para>
<para>End conditions and errors are printed in human-readable format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>array of marker states after simulation has finished </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_tot</parametername>
</parameternamelist>
<parameterdescription>
<para>number of markers in the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ascot5_main.c" line="793" column="6" bodyfile="ascot5_main.c" bodystart="793" bodyend="882"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ASCOT5 stand-alone program. </para>
    </briefdescription>
    <detaileddescription>
<para>This program reads data from input HDF5 file, simulates the given markers, and writes the output data to a HDF5 file.</para>
<para>The input and output files can be separate.</para>
<para>Example: <verbatim>ascot5_main --in=in --out=out
</verbatim> Here &quot;in&quot; refers to in.h5 where input data is located and &quot;out&quot; to out.h5 where results will be stored. If no input argument is given the data is read from ascot.h5. If not output argument is given the results are stored in the input file.</para>
<para>This program assumes that the input file contains magnetic field, electric field, plasma, wall, and neutral data along with markers and options. See hdf5_input.c for details. This program uses the input fields that are marked as active (the HDF5 file can contain multiple instances of same input types but only the active one is used here).</para>
<para>The results are stored under /results/ group in output HDF5 file. The group is created if one does not exists. For each run a specific &quot;run&quot; group is created, which has the format run-XXXXXXXXXX, where &quot;XXXXXXXXXX&quot; is randomly generated identification number (QID). The run group holds information when the run was started, which input fields were used (referenced by their QIDs), and at least the marker initial and end states if the simulation succeeded. Also any other diagnostic data that was used is stored there.</para>
<para>This program uses MPI by dividing the number of markers equally to all MPI processes. The markers are not suffled so user is advised to do it beforehand to ensure work is evenly distributed. A single MPI process can be simulated with: <verbatim>ascot5_main --mpi_size=size --mpi_rank=rank
</verbatim> where size refers to number of MPI processes and rank is the process being run (between [0, size-1]). Running the program this way does not use MPI. This is intended to be used in Condor-like environments.</para>
<para>You can add a description of the simulation as:</para>
<para>ascot5_main <ndash/>d=&quot;This is a test run&quot;</para>
<para>which is written in HDF5 file at the run group specific to this simulation.</para>
<para>In addition to output data, the simulation progress may be written in *.stdout files with each MPI process having dedicated file. See <ref refid="ascot5_8h" kindref="compound">ascot5.h</ref> for details. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="ascot5__main_8c_1a78c99ffd76a7bb3c8c74db76207e9ab4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_XOPEN_SOURCE<sp/>500<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;getopt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="math_8h" kindref="compound">math.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ascot5_8h" kindref="compound">ascot5.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="consts_8h" kindref="compound">consts.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="math_8h" kindref="compound">math.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wall_8h" kindref="compound">wall.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="diag_8h" kindref="compound">diag.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="B__field_8h" kindref="compound">B_field.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="plasma_8h" kindref="compound">plasma.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8h" kindref="compound">print.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="simulate_8h" kindref="compound">simulate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="particle_8h" kindref="compound">particle.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="endcond_8h" kindref="compound">endcond.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hdf5__interface_8h" kindref="compound">hdf5_interface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="offload_8h" kindref="compound">offload.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gitver.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mpi__interface_8h" kindref="compound">mpi_interface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ascot5__main_8h" kindref="compound">ascot5_main.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRAP_FPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fenv.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ascot5__main_8c_1aab0725951621a452e478e9f76402f5e8" kindref="member">read_arguments</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv,<sp/><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref>*<sp/>sim);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="ascot5__main_8c_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ascot5__main_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRAP_FPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>will<sp/>raise<sp/>floating<sp/>point<sp/>exceptions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>feenableexcept(FE_DIVBYZERO|<sp/>FE_INVALID<sp/>|<sp/>FE_OVERFLOW);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>you<sp/>are<sp/>hunting<sp/>a<sp/>specific<sp/>exception,<sp/>you<sp/>can<sp/>disable<sp/>the<sp/>exceptions</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>other<sp/>parts<sp/>of<sp/>the<sp/>code<sp/>by<sp/>surrounding<sp/>it<sp/>with:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>fedisableexcept(FE_DIVBYZERO<sp/>|<sp/>FE_INVALID<sp/>|<sp/>FE_OVERFLOW);</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>---<sp/>your<sp/><sp/>code<sp/>here<sp/>---</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>feenableexcept(FE_DIVBYZERO<sp/><sp/>|<sp/>FE_INVALID<sp/>|<sp/>FE_OVERFLOW);</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>and<sp/>parse<sp/>command<sp/>line<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref><sp/>sim;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="ascot5__main_8c_1aab0725951621a452e478e9f76402f5e8" kindref="member">read_arguments</ref>(argc,<sp/>argv,<sp/>&amp;sim)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>MPI<sp/>rank<sp/>and<sp/>set<sp/>qid<sp/>for<sp/>the<sp/>run*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>qid[11];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hdf5__interface_8c_1af9f7d2a100adfb3eade5aaaf5165c077" kindref="member">hdf5_generate_qid</ref>(qid);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_rank,<sp/>mpi_size,<sp/>mpi_root;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mpi__interface_8c_1a55d0c264b9d53e5f511845a206feb54f" kindref="member">mpi_interface_init</ref>(argc,<sp/>argv,<sp/>&amp;sim,<sp/>&amp;mpi_rank,<sp/>&amp;mpi_size,<sp/>&amp;mpi_root);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ASCOT5_MAIN\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GIT_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Tag<sp/>%s\nBranch<sp/>%s\n\n&quot;</highlight><highlight class="normal">,<sp/>GIT_VERSION,<sp/>GIT_BRANCH);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>under<sp/>version<sp/>control\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_NORMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Initialized<sp/>MPI,<sp/>rank<sp/>%d,<sp/>size<sp/>%d.\n&quot;</highlight><highlight class="normal">,<sp/>mpi_rank,<sp/>mpi_size);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Total<sp/>number<sp/>of<sp/>markers<sp/>to<sp/>be<sp/>simulated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_tot;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Marker<sp/>input<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinput__particle" kindref="compound">input_particle</ref>*<sp/>p;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Offload<sp/>data<sp/>arrays<sp/>that<sp/>are<sp/>allocated<sp/>when<sp/>input<sp/>is<sp/>read<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>B_offload_array;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>E_offload_array;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>plasma_offload_array;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>neutral_offload_array;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>wall_offload_array;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>wall_int_offload_array;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>boozer_offload_array;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>mhd_offload_array;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>asigma_offload_array;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>input<sp/>from<sp/>the<sp/>HDF5<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="hdf5__interface_8c_1a23b667652a4ea38dddf09350e9878aa2" kindref="member">hdf5_interface_read_input</ref>(&amp;sim,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdf5_input_options<sp/>|<sp/>hdf5_input_bfield<sp/>|</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdf5_input_efield<sp/><sp/>|<sp/>hdf5_input_plasma<sp/>|</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdf5_input_neutral<sp/>|<sp/>hdf5_input_wall<sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdf5_input_marker<sp/><sp/>|<sp/>hdf5_input_boozer<sp/>|</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdf5_input_mhd<sp/><sp/><sp/><sp/><sp/>|<sp/>hdf5_input_asigma,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;B_offload_array,<sp/>&amp;E_offload_array,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;plasma_offload_array,<sp/>&amp;neutral_offload_array,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;wall_offload_array,<sp/><sp/>&amp;wall_int_offload_array,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;boozer_offload_array,<sp/>&amp;mhd_offload_array,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;asigma_offload_array,<sp/>NULL,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;p,<sp/>&amp;n_tot)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nInput<sp/>reading<sp/>or<sp/>initializing<sp/>failed.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;See<sp/>stderr<sp/>for<sp/>details.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>marker<sp/>states<sp/>array<sp/>ps<sp/>and<sp/>free<sp/>marker<sp/>input<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nprts;<sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>markers<sp/>allocated<sp/>for<sp/>this<sp/>MPI<sp/>process<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparticle__state" kindref="compound">particle_state</ref>*<sp/>ps;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="ascot5__main_8c_1a06aa2611d6955391a69dfcf397c674b8" kindref="member">prepare_markers</ref>(</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;sim,<sp/>mpi_size,<sp/>mpi_rank,<sp/>n_tot,<sp/>&amp;p,<sp/>&amp;ps,<sp/>&amp;nprts,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_offload_array)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>CLEANUP_FAILURE;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Combine<sp/>input<sp/>offload<sp/>arrays<sp/>to<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoffload__package" kindref="compound">offload_package</ref><sp/>offload_data;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>offload_array;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>int_offload_array;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="ascot5__main_8c_1a1c47ac3fc9b50c894c452283725c7052" kindref="member">pack_offload_array</ref>(</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;sim,<sp/>&amp;offload_data,<sp/>&amp;B_offload_array,<sp/>&amp;E_offload_array,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;plasma_offload_array,<sp/>&amp;neutral_offload_array,<sp/>&amp;wall_offload_array,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;wall_int_offload_array,<sp/>&amp;boozer_offload_array,<sp/>&amp;mhd_offload_array,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;asigma_offload_array,<sp/>&amp;offload_array,<sp/>&amp;int_offload_array)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>CLEANUP_FAILURE;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>run<sp/>group<sp/>and<sp/>inistate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="ascot5__main_8c_1ab65b27e3eb40c198e345865c4a4a2950" kindref="member">write_rungroup</ref>(&amp;sim,<sp/>mpi_size,<sp/>mpi_rank,<sp/>mpi_root,<sp/>n_tot,<sp/>ps,<sp/>qid)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>CLEANUP_FAILURE;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Actual<sp/>simulation<sp/>is<sp/>done<sp/>here;<sp/>the<sp/>results<sp/>are<sp/>stored<sp/>in</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>diag_offload_array<sp/>and<sp/>pout<sp/>contains<sp/>end<sp/>states<sp/>from<sp/>all<sp/>processes.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>n_gathered<sp/>is<sp/>the<sp/>number<sp/>of<sp/>simulated<sp/>markers,<sp/>which<sp/>can<sp/>differ<sp/>from</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>n_tot<sp/>if<sp/>this<sp/>process<sp/>is<sp/>run<sp/>in<sp/>a<sp/>MPI-like<sp/>manner<sp/>without<sp/>MPI<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>output<sp/>will<sp/>contain<sp/>only<sp/>1/mpi_size<sp/>of<sp/>the<sp/>results.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>diag_offload_array;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparticle__state" kindref="compound">particle_state</ref>*<sp/>pout;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_gathered;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5__main_8c_1a99f525f561d0ebaf51c4f44a89dd6d25" kindref="member">offload_and_simulate</ref>(</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;sim,<sp/>mpi_size,<sp/>mpi_rank,<sp/>mpi_root,<sp/>n_tot,<sp/>nprts,<sp/>ps,<sp/>&amp;offload_data,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_array,<sp/>int_offload_array,<sp/>&amp;n_gathered,<sp/>&amp;pout,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;diag_offload_array);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>input<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="offload_8c_1a2522f11c93446eb6000b6b437f42a89f" kindref="member">offload_free_offload</ref>(&amp;offload_data,<sp/>&amp;offload_array,<sp/>&amp;int_offload_array);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>output<sp/>and<sp/>clean<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="ascot5__main_8c_1af26432295137ec027bfa2d1db823148f" kindref="member">write_output</ref>(&amp;sim,<sp/>mpi_rank,<sp/>mpi_root,<sp/>pout,<sp/>n_gathered,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag_offload_array)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>CLEANUP_FAILURE;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="diag_8c_1a3b90c421f536fac0c72366c6ca4d1e76" kindref="member">diag_free_offload</ref>(&amp;sim.<ref refid="structsim__offload__data_1ae442e5d90fb9269e3e6f9d5d06194385" kindref="member">diag_offload_data</ref>,<sp/>&amp;diag_offload_array);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Display<sp/>marker<sp/>summary<sp/>and<sp/>free<sp/>marker<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mpi_rank<sp/>==<sp/>mpi_root)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ascot5__main_8c_1a73cfeb9193341aff90367f8425e40f3a" kindref="member">print_marker_summary</ref>(pout,<sp/>n_tot);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>free(pout);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,<sp/></highlight><highlight class="stringliteral">&quot;\nDone.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mpi__interface_8c_1ab50e9156ca6b024e2855fc6f051e96c4" kindref="member">mpi_interface_finalize</ref>();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GOTO<sp/>this<sp/>block<sp/>to<sp/>free<sp/>resources<sp/>in<sp/>case<sp/>simulation<sp/>crashes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">CLEANUP_FAILURE:</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mpi__interface_8c_1ab50e9156ca6b024e2855fc6f051e96c4" kindref="member">mpi_interface_finalize</ref>();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>free(p);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ps);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>free(pout);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>free(offload_array);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>free(int_offload_array);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>free(diag_offload_array);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="ascot5__main_8c_1a06aa2611d6955391a69dfcf397c674b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ascot5__main_8c_1a06aa2611d6955391a69dfcf397c674b8" kindref="member">prepare_markers</ref>(</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref>*<sp/>sim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_rank,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_tot,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinput__particle" kindref="compound">input_particle</ref>**<sp/>pin,<sp/><ref refid="structparticle__state" kindref="compound">particle_state</ref>**<sp/>pout,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>nprts,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>B_offload_array)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>sets<sp/>up<sp/>GC<sp/>transformation<sp/>order<sp/>etc.<sp/>so<sp/>it<sp/>must<sp/>be<sp/>called<sp/>before</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>initializing<sp/>markers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="simulate_8c_1a0eb83ea67e77dffb1614c82865e0ddfa" kindref="member">simulate_init_offload</ref>(sim);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Choose<sp/>which<sp/>markers<sp/>are<sp/>used<sp/>in<sp/>this<sp/>MPI<sp/>process.<sp/>Simply<sp/>put,<sp/>markers</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>divided<sp/>into<sp/>mpi_size<sp/>sequential<sp/>blocks<sp/>and<sp/>the<sp/>mpi_rank:th<sp/>block</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>chosen<sp/>for<sp/>this<sp/>simulation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_index;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mpi__interface_8c_1a7711f37cffe29430a885743ac3c3050d" kindref="member">mpi_my_particles</ref>(&amp;start_index,<sp/>nprts,<sp/>n_tot,<sp/>mpi_rank,<sp/>mpi_size);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>(*pin)<sp/>+=<sp/>start_index;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>particlestates<sp/>on<sp/>host,<sp/>needs<sp/>magnetic<sp/>field<sp/>evaluation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_NORMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nInitializing<sp/>marker<sp/>states.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structB__field__data" kindref="compound">B_field_data</ref><sp/>Bdata;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="B__field_8c_1ad85ceaa2570aa7a5395ec20e400f4b9b" kindref="member">B_field_init</ref>(&amp;Bdata,<sp/>&amp;sim-&gt;<ref refid="structsim__offload__data_1a29e77f5d2dac736ad887275f129c8315" kindref="member">B_offload_data</ref>,<sp/>B_offload_array);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>*pout<sp/>=<sp/>(<ref refid="structparticle__state" kindref="compound">particle_state</ref>*)<sp/>malloc(*nprts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structparticle__state" kindref="compound">particle_state</ref>));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*nprts;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="particle_8c_1a8e96bcfc9c95b76f3c91663e34a43b01" kindref="member">particle_input_to_state</ref>(&amp;(*pin)[i],<sp/>&amp;(*pout)[i],<sp/>&amp;Bdata);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_NORMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Estimated<sp/>memory<sp/>usage<sp/>%.1f<sp/>MB.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>)<sp/>*<sp/>(*nprts))<sp/>/<sp/>(1024.0*1024.0));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_NORMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Marker<sp/>states<sp/>initialized.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>can<sp/>now<sp/>free<sp/>the<sp/>input<sp/>markers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>free((*pin)-start_index);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="ascot5__main_8c_1a1c47ac3fc9b50c894c452283725c7052" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ascot5__main_8c_1a1c47ac3fc9b50c894c452283725c7052" kindref="member">pack_offload_array</ref>(</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref>*<sp/>sim,<sp/><ref refid="structoffload__package" kindref="compound">offload_package</ref>*<sp/>offload_data,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>B_offload_array,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>E_offload_array,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>plasma_offload_array,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>neutral_offload_array,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>wall_offload_array,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>wall_int_offload_array,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>boozer_offload_array,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>mhd_offload_array,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>asigma_offload_array,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>offload_array,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>int_offload_array)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pack<sp/>offload<sp/>data<sp/>into<sp/>single<sp/>array<sp/>and<sp/>free<sp/>individual<sp/>offload<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="offload_8c_1a9e16efa6e08de658a942cbefc9ec2bf0" kindref="member">offload_init_offload</ref>(offload_data,<sp/>offload_array,<sp/>int_offload_array);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="offload_8c_1ab007fc10b186bccd0f8edf82d3358f9e" kindref="member">offload_pack</ref>(offload_data,<sp/>offload_array,<sp/>*B_offload_array,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a29e77f5d2dac736ad887275f129c8315" kindref="member">B_offload_data</ref>.<ref refid="structB__field__offload__data_1aa18fb7c0f67ea0f1b8fe6f92952020b0" kindref="member">offload_array_length</ref>,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="B__field_8c_1ad9f1807c8824e65f22bbff2056379003" kindref="member">B_field_free_offload</ref>(&amp;sim-&gt;<ref refid="structsim__offload__data_1a29e77f5d2dac736ad887275f129c8315" kindref="member">B_offload_data</ref>,<sp/>B_offload_array);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="offload_8c_1ab007fc10b186bccd0f8edf82d3358f9e" kindref="member">offload_pack</ref>(offload_data,<sp/>offload_array,<sp/>*E_offload_array,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1ab45c1976d6cd42f0e43bd94489e612f3" kindref="member">E_offload_data</ref>.<ref refid="structE__field__offload__data_1a9ed2ce68aa2e3a32e33a0050f850253c" kindref="member">offload_array_length</ref>,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="E__field_8c_1a9fc78bafc2e97eeb46f3a525a5fae7a4" kindref="member">E_field_free_offload</ref>(&amp;sim-&gt;<ref refid="structsim__offload__data_1ab45c1976d6cd42f0e43bd94489e612f3" kindref="member">E_offload_data</ref>,<sp/>E_offload_array);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="offload_8c_1ab007fc10b186bccd0f8edf82d3358f9e" kindref="member">offload_pack</ref>(offload_data,<sp/>offload_array,<sp/>*plasma_offload_array,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a39c08464071ad4b579c0f97bfe29c4f4" kindref="member">plasma_offload_data</ref>.<ref refid="structplasma__offload__data_1a05b3b7ba22ace0f56aa395ff14f4a25e" kindref="member">offload_array_length</ref>,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="plasma_8c_1afe8dc1604a293c321772d655d26869c5" kindref="member">plasma_free_offload</ref>(&amp;sim-&gt;<ref refid="structsim__offload__data_1a39c08464071ad4b579c0f97bfe29c4f4" kindref="member">plasma_offload_data</ref>,<sp/>plasma_offload_array);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="offload_8c_1ab007fc10b186bccd0f8edf82d3358f9e" kindref="member">offload_pack</ref>(offload_data,<sp/>offload_array,<sp/>*neutral_offload_array,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a4ed21bf0af1ecc3fb6ef936597797aa1" kindref="member">neutral_offload_data</ref>.<ref refid="structneutral__offload__data_1a810393cd7efe91e792a4739ec8d5b07e" kindref="member">offload_array_length</ref>,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="neutral_8c_1a3e4248e841ffb93d0027aa793eb43c86" kindref="member">neutral_free_offload</ref>(&amp;sim-&gt;<ref refid="structsim__offload__data_1a4ed21bf0af1ecc3fb6ef936597797aa1" kindref="member">neutral_offload_data</ref>,<sp/>neutral_offload_array);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="offload_8c_1ab007fc10b186bccd0f8edf82d3358f9e" kindref="member">offload_pack</ref>(offload_data,<sp/>offload_array,<sp/>*wall_offload_array,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a8416582b3980844d6205fdfb3bcc5ba5" kindref="member">wall_offload_data</ref>.<ref refid="structwall__offload__data_1a242a1130a7723b022ca4a69dc98040df" kindref="member">offload_array_length</ref>,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array,<sp/>*wall_int_offload_array,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a8416582b3980844d6205fdfb3bcc5ba5" kindref="member">wall_offload_data</ref>.<ref refid="structwall__offload__data_1a36b5f32e1356e5f6ea96255603bdbd12" kindref="member">int_offload_array_length</ref>);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="wall_8c_1a8c4fbe663f4f86dadb70d3a23907a080" kindref="member">wall_free_offload</ref>(&amp;sim-&gt;<ref refid="structsim__offload__data_1a8416582b3980844d6205fdfb3bcc5ba5" kindref="member">wall_offload_data</ref>,<sp/>wall_offload_array,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wall_int_offload_array);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="offload_8c_1ab007fc10b186bccd0f8edf82d3358f9e" kindref="member">offload_pack</ref>(offload_data,<sp/>offload_array,<sp/>*boozer_offload_array,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a815775cd25ace27188ffe7203669770a" kindref="member">boozer_offload_data</ref>.<ref refid="structboozer__offload__data_1a4b2476502252a94214cb43142a53686a" kindref="member">offload_array_length</ref>,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="boozer_8c_1a1d123f699ae5753515bc9eff290a11c9" kindref="member">boozer_free_offload</ref>(&amp;sim-&gt;<ref refid="structsim__offload__data_1a815775cd25ace27188ffe7203669770a" kindref="member">boozer_offload_data</ref>,<sp/>boozer_offload_array);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="offload_8c_1ab007fc10b186bccd0f8edf82d3358f9e" kindref="member">offload_pack</ref>(offload_data,<sp/>offload_array,<sp/>*mhd_offload_array,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a5131baa8f00abbb99494f82b3fe9a90c" kindref="member">mhd_offload_data</ref>.<ref refid="structmhd__offload__data_1a6fdcee91b43e43f63c5171d9a0e659f9" kindref="member">offload_array_length</ref>,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mhd_8c_1af5eb45555f91d9272b5ecc8a244dc0d5" kindref="member">mhd_free_offload</ref>(&amp;sim-&gt;<ref refid="structsim__offload__data_1a5131baa8f00abbb99494f82b3fe9a90c" kindref="member">mhd_offload_data</ref>,<sp/>mhd_offload_array);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="offload_8c_1ab007fc10b186bccd0f8edf82d3358f9e" kindref="member">offload_pack</ref>(offload_data,<sp/>offload_array,<sp/>*asigma_offload_array,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a711b5e59d9315621d1b077521d13b7f3" kindref="member">asigma_offload_data</ref>.<ref refid="structasigma__offload__data_1a91bd61350679824f725402d02e4012a5" kindref="member">offload_array_length</ref>,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="asigma_8c_1a721a595985f53e0168f79335ec52e8b1" kindref="member">asigma_free_offload</ref>(&amp;sim-&gt;<ref refid="structsim__offload__data_1a711b5e59d9315621d1b077521d13b7f3" kindref="member">asigma_offload_data</ref>,<sp/>asigma_offload_array);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="ascot5__main_8c_1ab65b27e3eb40c198e345865c4a4a2950" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ascot5__main_8c_1ab65b27e3eb40c198e345865c4a4a2950" kindref="member">write_rungroup</ref>(</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref>*<sp/>sim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_rank,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_root,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_tot,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparticle__state" kindref="compound">particle_state</ref>*<sp/>ps,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>qid)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mpi_rank<sp/>==<sp/>mpi_root)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>results<sp/>group<sp/>in<sp/>the<sp/>output<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_IO,<sp/>mpi_rank,<sp/></highlight><highlight class="stringliteral">&quot;\nPreparing<sp/>output.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="hdf5__interface_8c_1a151038d991730b2b0c11548341f7d728" kindref="member">hdf5_interface_init_results</ref>(sim,<sp/>qid,<sp/></highlight><highlight class="stringliteral">&quot;run&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nInitializing<sp/>output<sp/>failed.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;See<sp/>stderr<sp/>for<sp/>details.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>offload<sp/>data<sp/>and<sp/>terminate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1a3a6019d6aa6f6a24ef9cdf053255a6c8" kindref="member">qid</ref>,<sp/>qid);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Gather<sp/>particle<sp/>states<sp/>so<sp/>that<sp/>we<sp/>can<sp/>write<sp/>inistate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_gathered;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparticle__state" kindref="compound">particle_state</ref>*<sp/>ps_gathered;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mpi__interface_8c_1a267a2b3da8d744e8e43dff189b6875b8" kindref="member">mpi_gather_particlestate</ref>(ps,<sp/>&amp;ps_gathered,<sp/>&amp;n_gathered,<sp/>n_tot,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpi_rank,<sp/>mpi_size,<sp/>mpi_root);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mpi_rank<sp/>==<sp/>mpi_root)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>inistate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="hdf5__interface_8c_1a362866ba5b52f00bdfaa807f7a4e8e76" kindref="member">hdf5_interface_write_state</ref>(sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>,<sp/></highlight><highlight class="stringliteral">&quot;inistate&quot;</highlight><highlight class="normal">,<sp/>n_gathered,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ps_gathered))<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Writing<sp/>inistate<sp/>failed.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;See<sp/>stderr<sp/>for<sp/>details.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>offload<sp/>data<sp/>and<sp/>terminate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_NORMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nInistate<sp/>written.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ps_gathered);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="ascot5__main_8c_1a99f525f561d0ebaf51c4f44a89dd6d25" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ascot5__main_8c_1a99f525f561d0ebaf51c4f44a89dd6d25" kindref="member">offload_and_simulate</ref>(</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref>*<sp/>sim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_rank,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_root,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_tot,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nprts,<sp/><ref refid="structparticle__state" kindref="compound">particle_state</ref>*<sp/>pin,<sp/><ref refid="structoffload__package" kindref="compound">offload_package</ref>*<sp/>offload_data,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>offload_array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>int_offload_array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n_gathered,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparticle__state" kindref="compound">particle_state</ref>**<sp/>pout,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>diag_offload_array)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>diagnostics<sp/>offload<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="diag_8c_1a4570a476d5bb4349ef4baa45b47e8847" kindref="member">diag_init_offload</ref>(&amp;sim-&gt;<ref refid="structsim__offload__data_1ae442e5d90fb9269e3e6f9d5d06194385" kindref="member">diag_offload_data</ref>,<sp/>diag_offload_array,<sp/>n_tot);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref><sp/>diag_offload_array_size<sp/>=<sp/>sim-&gt;<ref refid="structsim__offload__data_1ae442e5d90fb9269e3e6f9d5d06194385" kindref="member">diag_offload_data</ref>.<ref refid="structdiag__offload__data_1ab0497f303ab592808583fd85ab86bb6f" kindref="member">offload_array_length</ref></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>)<sp/>/<sp/>(1024.0*1024.0);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_NORMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Initialized<sp/>diagnostics,<sp/>%.1f<sp/>MB.\n&quot;</highlight><highlight class="normal">,<sp/>diag_offload_array_size);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Divide<sp/>markers<sp/>among<sp/>host<sp/>and<sp/>target<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TARGET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_mic<sp/>=<sp/>nprts;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_host<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_mic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_host<sp/>=<sp/>nprts;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mic_start<sp/>=<sp/>0,<sp/>mic_end=0,<sp/>host_start=0,<sp/>host_end=0;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>message<sp/>buffer<sp/>before<sp/>proceeding<sp/>to<sp/>offload<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allow<sp/>threads<sp/>to<sp/>spawn<sp/>threads<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>omp_set_nested(1);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Actual<sp/>marker<sp/>simulation<sp/>happens<sp/>here.<sp/>Threads<sp/>are<sp/>spawned<sp/>which</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>distribute<sp/>the<sp/>execution<sp/>between<sp/>target(s)<sp/>and<sp/>host.<sp/>Both<sp/>input<sp/>and</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>diagnostic<sp/>offload<sp/>arrays<sp/>are<sp/>mapped<sp/>to<sp/>target.<sp/>Simulation<sp/>is<sp/>initialized</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>at<sp/>the<sp/>target<sp/>and<sp/>completed<sp/>within<sp/>the<sp/>simulate()<sp/>function.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>sections<sp/>num_threads(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Run<sp/>simulation<sp/>on<sp/>first<sp/>target<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TARGET<sp/>&gt;=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mic_start<sp/>=<sp/>omp_get_wtime();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>target<sp/>device(0)<sp/>map(<sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin[0:n_mic],<sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_array[0:offload_data.offload_array_length],<sp/>\</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array[0:int_offload_array_length],<sp/>\</highlight></codeline>
<codeline lineno="514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag_offload_array[0:sim.diag_offload_data.offload_array_length]<sp/>\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="simulate_8c_1a731ec48c95f5641ae30d383ba7d5d387" kindref="member">simulate</ref>(1,<sp/>n_mic,<sp/>pin,<sp/>sim,<sp/>offload_data,<sp/>offload_array,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_offload_array,<sp/>*diag_offload_array);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mic_end<sp/>=<sp/>omp_get_wtime();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>target,<sp/>marker<sp/>simulation<sp/>happens<sp/>where<sp/>the<sp/>code<sp/>execution<sp/>began.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Offloading<sp/>is<sp/>only<sp/>emulated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TARGET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_start<sp/>=<sp/>omp_get_wtime();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="simulate_8c_1a731ec48c95f5641ae30d383ba7d5d387" kindref="member">simulate</ref>(0,<sp/>n_host,<sp/>pin+2*n_mic,<sp/>sim,<sp/>offload_data,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offload_array,<sp/>int_offload_array,<sp/>*diag_offload_array);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_end<sp/>=<sp/>omp_get_wtime();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Code<sp/>execution<sp/>returns<sp/>to<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_NORMAL,<sp/>mpi_rank,<sp/></highlight><highlight class="stringliteral">&quot;gpu<sp/>%lf<sp/>s,<sp/>host<sp/>%lf<sp/>s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mic_end-mic_start,<sp/>host_end-host_start);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Gather<sp/>output<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mpi__interface_8c_1a267a2b3da8d744e8e43dff189b6875b8" kindref="member">mpi_gather_particlestate</ref>(pin,<sp/>pout,<sp/>n_gathered,<sp/>n_tot,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpi_rank,<sp/>mpi_size,<sp/>mpi_root);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>free(pin);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mpi__interface_8c_1a6b149e4c10b749ba7b5e203862ab6430" kindref="member">mpi_gather_diag</ref>(&amp;sim-&gt;<ref refid="structsim__offload__data_1ae442e5d90fb9269e3e6f9d5d06194385" kindref="member">diag_offload_data</ref>,<sp/>*diag_offload_array,<sp/>n_tot,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpi_rank,<sp/>mpi_size,<sp/>mpi_root);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="564" refid="ascot5__main_8c_1af26432295137ec027bfa2d1db823148f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ascot5__main_8c_1af26432295137ec027bfa2d1db823148f" kindref="member">write_output</ref>(</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref>*<sp/>sim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_rank,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_root,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparticle__state" kindref="compound">particle_state</ref>*<sp/>ps_gathered,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_gathered,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>diag_offload_array){</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mpi_rank<sp/>==<sp/>mpi_root)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>endstate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="hdf5__interface_8c_1a362866ba5b52f00bdfaa807f7a4e8e76" kindref="member">hdf5_interface_write_state</ref>(</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>,<sp/></highlight><highlight class="stringliteral">&quot;endstate&quot;</highlight><highlight class="normal">,<sp/>n_gathered,<sp/>ps_gathered))<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nWriting<sp/>endstate<sp/>failed.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;See<sp/>stderr<sp/>for<sp/>details.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_NORMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Endstate<sp/>written.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Combine<sp/>diagnostic<sp/>data<sp/>and<sp/>write<sp/>it<sp/>to<sp/>HDF5<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nCombining<sp/>and<sp/>writing<sp/>diagnostics.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err_writediag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mpi_rank<sp/>==<sp/>mpi_root)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err_writediag<sp/>=<sp/><ref refid="hdf5__interface_8c_1ad00a8fcabbab881c4dedcde3cb09e92f" kindref="member">hdf5_interface_write_diagnostics</ref>(sim,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag_offload_array,<sp/>sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(err_writediag)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nWriting<sp/>diagnostics<sp/>failed.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;See<sp/>stderr<sp/>for<sp/>details.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a9ce66afb8bad90b9c032595561187347" kindref="member">print_out0</ref>(VERBOSE_MINIMAL,<sp/>mpi_rank,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Diagnostics<sp/>written.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="ascot5__main_8c_1aab0725951621a452e478e9f76402f5e8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ascot5__main_8c_1aab0725951621a452e478e9f76402f5e8" kindref="member">read_arguments</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv,<sp/><ref refid="structsim__offload__data" kindref="compound">sim_offload_data</ref>*<sp/>sim)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">option<sp/>longopts[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>required_argument,<sp/>0,<sp/>1},</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal">,<sp/>required_argument,<sp/>0,<sp/>2},</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;mpi_size&quot;</highlight><highlight class="normal">,<sp/>required_argument,<sp/>0,<sp/>3},</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;mpi_rank&quot;</highlight><highlight class="normal">,<sp/>required_argument,<sp/>0,<sp/>4},</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/>required_argument,<sp/>0,<sp/>5},</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;options&quot;</highlight><highlight class="normal">,<sp/>required_argument,<sp/>0,<sp/>6},</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;bfield&quot;</highlight><highlight class="normal">,<sp/><sp/>required_argument,<sp/>0,<sp/>7},</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;efield&quot;</highlight><highlight class="normal">,<sp/><sp/>required_argument,<sp/>0,<sp/>8},</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;marker&quot;</highlight><highlight class="normal">,<sp/><sp/>required_argument,<sp/>0,<sp/>9},</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;wall&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>required_argument,<sp/>0,<sp/>10},</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;plasma&quot;</highlight><highlight class="normal">,<sp/><sp/>required_argument,<sp/>0,<sp/>11},</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;neutral&quot;</highlight><highlight class="normal">,<sp/>required_argument,<sp/>0,<sp/>12},</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;boozer&quot;</highlight><highlight class="normal">,<sp/><sp/>required_argument,<sp/>0,<sp/>13},</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;mhd&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>required_argument,<sp/>0,<sp/>14},</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;asigma&quot;</highlight><highlight class="normal">,<sp/><sp/>required_argument,<sp/>0,<sp/>15},</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>0}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>default<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>[0]<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>[0]<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a409826e5528d891048ba7407d47f241f" kindref="member">mpi_rank</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1ac1f001102767cad77961793f4b13fdcf" kindref="member">mpi_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1aded2db88e5bdfe9a891b6aa51fe219a2" kindref="member">description</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>description.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a053daa31b30c3c30537909269005bf6e" kindref="member">qid_options</ref>[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1aae29e9f86fd042e0ccba1564d763cf1b" kindref="member">qid_bfield</ref>[0]<sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1ac07e99f3f47922148108186e7a9a3170" kindref="member">qid_efield</ref>[0]<sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a5927694fc22aea95d5ca17dc43a1b87a" kindref="member">qid_marker</ref>[0]<sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a03d450ec32f3de1d1945cbac66bbcd37" kindref="member">qid_wall</ref>[0]<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1ab5374be6666f1935779c9b745d414b2b" kindref="member">qid_plasma</ref>[0]<sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1aabe3ec41fccd8140d725b44eaf8a1430" kindref="member">qid_neutral</ref>[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a0d0d52eff6816e373731c980144a795b" kindref="member">qid_boozer</ref>[0]<sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a695e4f61adefa1dbbc38c44c8cc84bc5" kindref="member">qid_mhd</ref>[0]<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1ac0b1557246ad782681b1e923772d86a7" kindref="member">qid_asigma</ref>[0]<sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a56b2de5f696ad3a65f4fe3e572a08c35" kindref="member">qid_nbi</ref>[0]<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>user<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slen;<sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((c<sp/>=<sp/>getopt_long(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>longopts,<sp/>NULL))<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>.hdf5<sp/>filename<sp/>can<sp/>be<sp/>specified<sp/>with<sp/>or<sp/>without<sp/>the</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>trailing<sp/>.h5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slen<sp/>=<sp/>strlen(optarg);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>slen<sp/>&gt;<sp/>3<sp/>&amp;&amp;<sp/>!strcmp(optarg+slen-3,<sp/></highlight><highlight class="stringliteral">&quot;.h5&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>)[slen-3]=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>.hdf5<sp/>filename<sp/>can<sp/>be<sp/>specified<sp/>with<sp/>or<sp/>without<sp/>the</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>trailing<sp/>.h5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slen<sp/>=<sp/>strlen(optarg);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>slen<sp/>&gt;<sp/>3<sp/>&amp;&amp;<sp/>!strcmp(optarg+slen-3,<sp/></highlight><highlight class="stringliteral">&quot;.h5&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>)[slen-3]=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1ac1f001102767cad77961793f4b13fdcf" kindref="member">mpi_size</ref><sp/>=<sp/>atoi(optarg);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim-&gt;<ref refid="structsim__offload__data_1a409826e5528d891048ba7407d47f241f" kindref="member">mpi_rank</ref><sp/>=<sp/>atoi(optarg);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1aded2db88e5bdfe9a891b6aa51fe219a2" kindref="member">description</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1a053daa31b30c3c30537909269005bf6e" kindref="member">qid_options</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1aae29e9f86fd042e0ccba1564d763cf1b" kindref="member">qid_bfield</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1ac07e99f3f47922148108186e7a9a3170" kindref="member">qid_efield</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1a5927694fc22aea95d5ca17dc43a1b87a" kindref="member">qid_marker</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1a03d450ec32f3de1d1945cbac66bbcd37" kindref="member">qid_wall</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1ab5374be6666f1935779c9b745d414b2b" kindref="member">qid_plasma</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1aabe3ec41fccd8140d725b44eaf8a1430" kindref="member">qid_neutral</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1a0d0d52eff6816e373731c980144a795b" kindref="member">qid_boozer</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1a695e4f61adefa1dbbc38c44c8cc84bc5" kindref="member">qid_mhd</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1ac0b1557246ad782681b1e923772d86a7" kindref="member">qid_asigma</ref>,<sp/>optarg);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unregonizable<sp/>argument(s).<sp/>Tell<sp/>user<sp/>how<sp/>to<sp/>run<sp/>ascot5_main</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nUnrecognized<sp/>argument.<sp/>The<sp/>valid<sp/>arguments<sp/>are:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;--in<sp/>input<sp/>file<sp/>(default:<sp/>ascot.h5)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;--out<sp/>output<sp/>file<sp/>(default:<sp/>same<sp/>as<sp/>input)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;--mpi_size<sp/>number<sp/>of<sp/>independent<sp/>processes\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;--mpi_rank<sp/>rank<sp/>of<sp/>independent<sp/>process\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;--d<sp/>run<sp/>description<sp/>maximum<sp/>of<sp/>250<sp/>characters\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Default<sp/>value<sp/>for<sp/>input<sp/>file<sp/>is<sp/>ascot.h5,<sp/>and<sp/>for<sp/>output<sp/>same<sp/>as<sp/>input</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>file.<sp/>Adujust<sp/>hdf5_in<sp/>and<sp/>hdf5_out<sp/>accordingly.<sp/>For<sp/>output<sp/>file,<sp/>we<sp/>don&apos;t</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>add<sp/>the<sp/>.h5<sp/>extension<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>input,<sp/>use<sp/>default<sp/>values<sp/>for<sp/>both<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;ascot.h5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ascot.h5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Output<sp/>file<sp/>is<sp/>given<sp/>but<sp/>the<sp/>input<sp/>file<sp/>is<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;ascot.h5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>,<sp/></highlight><highlight class="stringliteral">&quot;.h5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>file<sp/>is<sp/>given<sp/>but<sp/>the<sp/>output<sp/>is<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>,<sp/></highlight><highlight class="stringliteral">&quot;.h5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>,<sp/>sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Both<sp/>input<sp/>and<sp/>output<sp/>files<sp/>are<sp/>given<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(sim-&gt;<ref refid="structsim__offload__data_1a2ccd6d6cdbe704cfc768088a985167f1" kindref="member">hdf5_in</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;.h5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(sim-&gt;<ref refid="structsim__offload__data_1ac3cf24680eca066bb68b8129e66e0448" kindref="member">hdf5_out</ref>,<sp/></highlight><highlight class="stringliteral">&quot;.h5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="793" refid="ascot5__main_8c_1a73cfeb9193341aff90367f8425e40f3a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ascot5__main_8c_1a73cfeb9193341aff90367f8425e40f3a" kindref="member">print_marker_summary</ref>(<ref refid="structparticle__state" kindref="compound">particle_state</ref>*<sp/>ps,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_tot)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,<sp/></highlight><highlight class="stringliteral">&quot;\nSummary<sp/>of<sp/>results:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>arrays<sp/>that<sp/>are<sp/>needed<sp/>to<sp/>store<sp/>unique<sp/>end<sp/>conditions<sp/>and</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>errors.<sp/>We<sp/>can<sp/>have<sp/>at<sp/>most<sp/>n_tot<sp/>different<sp/>values.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>temp<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)malloc(n_tot*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>unique<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)malloc(n_tot*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>count<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)malloc((n_tot+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>we<sp/>find<sp/>out<sp/>what<sp/>the<sp/>end<sp/>conditions<sp/>are<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n_tot;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i]<sp/>=<sp/>ps[i].<ref refid="structparticle__state_1afba5ec956f0515668cba944ce1f02daf" kindref="member">endcond</ref>;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="math_8c_1a0891e188229459cadca6a189675d9af6" kindref="member">math_uniquecount</ref>(temp,<sp/>unique,<sp/>count,<sp/>n_tot);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>count[n_tot]<sp/>=<sp/>0;</highlight><highlight class="comment">/*<sp/>This<sp/>ensures<sp/>the<sp/>following<sp/>while<sp/>loops<sp/>are<sp/>terminated.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Print<sp/>the<sp/>end<sp/>conditions,<sp/>if<sp/>marker<sp/>has<sp/>multiple<sp/>end<sp/>conditions,<sp/>separate</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>those<sp/>with<sp/>&quot;and&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(count[i]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endconds[32];</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;32;j++)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endconds[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>endcondstr[256];</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endcondstr[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Represent<sp/>all<sp/>end<sp/>conditions<sp/>with<sp/>a<sp/>single<sp/>string<sp/>and<sp/>print<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="endcond_8c_1a305250a33bad6aa88ef074a81755f9d5" kindref="member">endcond_parse</ref>(unique[i],<sp/>endconds);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(endconds[j])<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(endcondstr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp[256];</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="endcond_8c_1af61d05ad7e7b74f37b20effb5c2e2b9e" kindref="member">endcond_parse2str</ref>(endconds[j],<sp/>temp);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(endcondstr,<sp/>temp);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(endcondstr,<sp/></highlight><highlight class="stringliteral">&quot;Aborted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,<sp/></highlight><highlight class="stringliteral">&quot;%9d<sp/>markers<sp/>had<sp/>end<sp/>condition<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count[i],<sp/>endcondstr);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>line<sp/>between<sp/>end<sp/>conditions<sp/>and<sp/>errors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>all<sp/>errors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n_tot;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i]<sp/>=<sp/>(int)(ps[i].err);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="math_8c_1a0891e188229459cadca6a189675d9af6" kindref="member">math_uniquecount</ref>(temp,<sp/>unique,<sp/>count,<sp/>n_tot);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Go<sp/>through<sp/>each<sp/>unique<sp/>error<sp/>and<sp/>represent<sp/>is<sp/>a<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(count[i]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unique[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Value<sp/>0<sp/>indicates<sp/>no<sp/>error<sp/>occurred<sp/>so<sp/>skip<sp/>that<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[256];</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[256];</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>file[256];</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="error_8c_1ab47182e82ea9b7ea650213fc3abeed16" kindref="member">error_parse2str</ref>(unique[i],<sp/>msg,<sp/>line,<sp/>file);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%9d<sp/>markers<sp/>were<sp/>aborted<sp/>with<sp/>an<sp/>error<sp/>message:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at<sp/>line<sp/>%s<sp/>in<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count[i],<sp/>msg,<sp/>line,<sp/>file);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>count[0]<sp/>equals<sp/>to<sp/>number<sp/>of<sp/>markers<sp/>and<sp/>their<sp/>error<sp/>field<sp/>is<sp/>zero,</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>have<sp/>no<sp/>markers<sp/>that<sp/>were<sp/>aborted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(count[0]<sp/>==<sp/>n_tot<sp/>&amp;&amp;<sp/>unique[0]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8h_1a8520c71eb5db223009e5079e420bc398" kindref="member">print_out</ref>(VERBOSE_MINIMAL,</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>No<sp/>markers<sp/>were<sp/>aborted.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>temporary<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>free(temp);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>free(unique);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>free(count);</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="ascot5_main.c"/>
  </compounddef>
</doxygen>
