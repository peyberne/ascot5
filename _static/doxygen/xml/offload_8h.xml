<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="offload_8h" kind="file" language="C++">
    <compoundname>offload.h</compoundname>
    <includedby refid="ascot5__main_8c" local="yes">ascot5_main.c</includedby>
    <includedby refid="ascot5__main_8h" local="yes">ascot5_main.h</includedby>
    <includedby refid="offload_8c" local="yes">offload.c</includedby>
    <includedby refid="simulate_8c" local="yes">simulate.c</includedby>
    <includedby refid="simulate_8h" local="yes">simulate.h</includedby>
    <invincdepgraph>
      <node id="19">
        <label>simulate/simulate_ml_adaptive.c</label>
        <link refid="simulate__ml__adaptive_8c"/>
      </node>
      <node id="30">
        <label>simulate/simulate_ml_adaptive.h</label>
        <link refid="simulate__ml__adaptive_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>diag.c</label>
        <link refid="diag_8c"/>
      </node>
      <node id="5">
        <label>simulate.c</label>
        <link refid="simulate_8c"/>
      </node>
      <node id="6">
        <label>simulate.h</label>
        <link refid="simulate_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>simulate/simulate_fo_fixed.c</label>
        <link refid="simulate__fo__fixed_8c"/>
      </node>
      <node id="27">
        <label>simulate/simulate_fo_fixed.h</label>
        <link refid="simulate__fo__fixed_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>simulate/simulate_gc_fixed.c</label>
        <link refid="simulate__gc__fixed_8c"/>
      </node>
      <node id="2">
        <label>ascot5_main.c</label>
        <link refid="ascot5__main_8c"/>
      </node>
      <node id="29">
        <label>simulate/simulate_gc_fixed.h</label>
        <link refid="simulate__gc__fixed_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ascot5_main.h</label>
        <link refid="ascot5__main_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>endcond.c</label>
        <link refid="endcond_8c"/>
      </node>
      <node id="14">
        <label>endcond.h</label>
        <link refid="endcond_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>afsi.c</label>
        <link refid="afsi_8c"/>
      </node>
      <node id="8">
        <label>afsi.h</label>
        <link refid="afsi_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>diag/diag_orb.c</label>
        <link refid="diag__orb_8c"/>
      </node>
      <node id="15">
        <label>hdf5io/hdf5_options.c</label>
        <link refid="hdf5__options_8c"/>
      </node>
      <node id="23">
        <label>hdf5io/hdf5_options.h</label>
        <link refid="hdf5__options_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>hdf5io/hdf5_orbit.c</label>
        <link refid="hdf5__orbit_8c"/>
      </node>
      <node id="17">
        <label>simulate/simulate_gc_adaptive.c</label>
        <link refid="simulate__gc__adaptive_8c"/>
      </node>
      <node id="28">
        <label>simulate/simulate_gc_adaptive.h</label>
        <link refid="simulate__gc__adaptive_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>mpi_interface.c</label>
        <link refid="mpi__interface_8c"/>
      </node>
      <node id="26">
        <label>mpi_interface.h</label>
        <link refid="mpi__interface_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>libascot.c</label>
        <link refid="libascot_8c"/>
      </node>
      <node id="20">
        <label>hdf5_interface.c</label>
        <link refid="hdf5__interface_8c"/>
      </node>
      <node id="21">
        <label>hdf5_interface.h</label>
        <link refid="hdf5__interface_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>diag/diag_transcoef.c</label>
        <link refid="diag__transcoef_8c"/>
      </node>
      <node id="9">
        <label>bbnbi5.c</label>
        <link refid="bbnbi5_8c"/>
      </node>
      <node id="4">
        <label>offload.c</label>
        <link refid="offload_8c"/>
      </node>
      <node id="1">
        <label>offload.h</label>
        <link refid="offload_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structoffload__package" prot="public">offload_package</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="offload_8h_1a7a844504f9fc4dd56894c93c10cc8f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_init_offload</definition>
        <argsstring>(offload_package *o, real **pack_array, int **int_array)</argsstring>
        <name>offload_init_offload</name>
        <param>
          <type><ref refid="structoffload__package" kindref="compound">offload_package</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>pack_array</declname>
          <defname>offload_array</defname>
        </param>
        <param>
          <type>int **</type>
          <declname>int_array</declname>
          <defname>int_offload_array</defname>
        </param>
        <briefdescription>
<para>Initialize offload package. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets offload_package.pack_array_length and <ref refid="structoffload__package_1a6195bbcd9526f1ceec93b22b4a9489f6" kindref="member">offload_package.unpack_pos</ref> to zero and assigns NULL to offload_array pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>uninitialized offload package </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to packarray </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to int packarray </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="offload.h" line="23" column="6" bodyfile="offload.c" bodystart="31" bodyend="39" declfile="offload.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="offload_8h_1a72d7c23e5f73ed9fe416aecb60e66d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_free_offload</definition>
        <argsstring>(offload_package *o, real **pack_array, int **int_array)</argsstring>
        <name>offload_free_offload</name>
        <param>
          <type><ref refid="structoffload__package" kindref="compound">offload_package</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>pack_array</declname>
          <defname>offload_array</defname>
        </param>
        <param>
          <type>int **</type>
          <declname>int_array</declname>
          <defname>int_offload_array</defname>
        </param>
        <briefdescription>
<para>Free offload array and set <ref refid="structoffload__package" kindref="compound">offload_package</ref> to clean state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>offload package </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload_array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to int packarray </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="offload.h" line="25" column="6" bodyfile="offload.c" bodystart="49" bodyend="59" declfile="offload.h" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="offload_8h_1ab007fc10b186bccd0f8edf82d3358f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_pack</definition>
        <argsstring>(offload_package *o, real **offload_array, real *pack_array, size_t pack_length, int **int_offload_array, int *int_pack_array, size_t int_pack_length)</argsstring>
        <name>offload_pack</name>
        <param>
          <type><ref refid="structoffload__package" kindref="compound">offload_package</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>offload_array</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>pack_array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pack_length</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>int_offload_array</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>int_pack_array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>int_pack_length</declname>
        </param>
        <briefdescription>
<para>Pack an offload array to package array. </para>
        </briefdescription>
        <detaileddescription>
<para>Reallocates the offload array so that the new data from the package array can be appended. Once the data has been appended, the old offload array is freed. The new length of the offload array is stored to <ref refid="structoffload__package" kindref="compound">offload_package</ref> struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>offload package </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload array where data will be packed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pack_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pack array containing the data to be appended </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pack_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the offload_array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to offload array where integer data will be packed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_pack_array</parametername>
</parameternamelist>
<parameterdescription>
<para>pack array containing the integer data to be appended </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_pack_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the int_offload_array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="offload.h" line="28" column="6" bodyfile="offload.c" bodystart="78" bodyend="119" declfile="offload.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="offload_8h_1aa2662d3156f809fb6d7ebe7d6135f0d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_unpack</definition>
        <argsstring>(offload_package *o, real *pack_array, size_t pack_length, int *int_offload_array, size_t int_pack_length, real **ptr, int **intptr)</argsstring>
        <name>offload_unpack</name>
        <param>
          <type><ref refid="structoffload__package" kindref="compound">offload_package</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> *</type>
          <declname>pack_array</declname>
          <defname>offload_array</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pack_length</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>int_offload_array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>int_pack_length</declname>
        </param>
        <param>
          <type><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref> **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>intptr</declname>
        </param>
        <briefdescription>
<para>Unpack offload array from the package. </para>
        </briefdescription>
        <detaileddescription>
<para>The data is not actually moved anywhere. Unpacking means that pointers to the start of packed offload arrays are returned. Unpacking must be done in the same order as data was packed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>offload package </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pack_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the data that is unpacked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_offload_array</parametername>
</parameternamelist>
<parameterdescription>
<para>int offload array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_pack_length</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer where the unpacked data begins </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer where the unpacked int data begins </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="offload.h" line="33" column="6" bodyfile="offload.c" bodystart="137" bodyend="145" declfile="offload.h" declline="33" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Header file for <ref refid="offload_8h" kindref="compound">offload.h</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OFFLOAD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OFFLOAD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="structoffload__package" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12" refid="structoffload__package_1a8c20a7eb71fb31e996662e3b745702a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structoffload__package_1a8c20a7eb71fb31e996662e3b745702a2" kindref="member">offload_array_length</ref>;<sp/></highlight></codeline>
<codeline lineno="14" refid="structoffload__package_1a6195bbcd9526f1ceec93b22b4a9489f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structoffload__package_1a6195bbcd9526f1ceec93b22b4a9489f6" kindref="member">unpack_pos</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="16" refid="structoffload__package_1a0db258b5261986426506807f5543ccd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structoffload__package_1a0db258b5261986426506807f5543ccd1" kindref="member">int_offload_array_length</ref>;<sp/></highlight></codeline>
<codeline lineno="18" refid="structoffload__package_1ae3e6d85fe4c964f51a70354df2360a92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structoffload__package_1ae3e6d85fe4c964f51a70354df2360a92" kindref="member">int_unpack_pos</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal">}<sp/><ref refid="structoffload__package" kindref="compound">offload_package</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="offload_8h_1a7a844504f9fc4dd56894c93c10cc8f38" kindref="member">offload_init_offload</ref>(<ref refid="structoffload__package" kindref="compound">offload_package</ref>*<sp/>o,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>pack_array,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>int_array);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="offload_8h_1a72d7c23e5f73ed9fe416aecb60e66d47" kindref="member">offload_free_offload</ref>(<ref refid="structoffload__package" kindref="compound">offload_package</ref>*<sp/>o,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>pack_array,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>int_array);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="offload_8h_1ab007fc10b186bccd0f8edf82d3358f9e" kindref="member">offload_pack</ref>(<ref refid="structoffload__package" kindref="compound">offload_package</ref>*<sp/>o,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>offload_array,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>pack_array,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pack_length,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>int_offload_array,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>int_pack_array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>int_pack_length);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>declare<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="offload_8h_1aa2662d3156f809fb6d7ebe7d6135f0d5" kindref="member">offload_unpack</ref>(<ref refid="structoffload__package" kindref="compound">offload_package</ref>*<sp/>o,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>*<sp/>pack_array,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pack_length,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>int_offload_array,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>int_pack_length,<sp/><ref refid="ascot5_8h_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>**<sp/>ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>intptr);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>end<sp/>declare<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="offload.h"/>
  </compounddef>
</doxygen>
